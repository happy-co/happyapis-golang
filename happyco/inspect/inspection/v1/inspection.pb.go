// Code generated by protoc-gen-go.
// source: happyco/inspect/inspection/v1/inspection.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	happyco/inspect/inspection/v1/inspection.proto

It has these top-level messages:
	CreateDelegatedInspectionLinksRequest
	CreateDelegatedInspectionLinkRequest
	CreateDelegatedInspectionLinksResponse
	CreateDelegatedInspectionLinkResponse
	AddInspectionPhotosRequest
	AddInspectionPhotoRequest
	AddInspectionPhotosResponse
	AddInspectionPhotoResponse
	Inspection
	ScheduledInspection
	InspectionData
	ListInspectionsRequest
	ListInspectionsResponse
	CreateInspectionsRequest
	CreateInspectionsResponse
	UpdateInspectionsRequest
	UpdateInspectionsResponse
	SetInspectionsArchivedRequest
	SetInspectionsArchivedResponse
	InspectionStatusChangesEventRequest
	InspectionStatusChangesEvent
	InspectionStatusChangesEventAck
	InspectionStatusChangesEventAckResponse
*/
package v1

import proto "github.com/happy-co/happyapis-golang/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import happyco_type_v1 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v11 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v12 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v13 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_inspect_type_v1 "github.com/happy-co/happyapis-golang/happyco/inspect/type/v1"
import _ "github.com/happy-co/happyapis-golang/google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InspectionStatusChangesEvent_InspectionStatusChange_Status int32

const (
	InspectionStatusChangesEvent_InspectionStatusChange_SCHEDULED   InspectionStatusChangesEvent_InspectionStatusChange_Status = 0
	InspectionStatusChangesEvent_InspectionStatusChange_IN_PROGRESS InspectionStatusChangesEvent_InspectionStatusChange_Status = 1
	InspectionStatusChangesEvent_InspectionStatusChange_COMPLETED   InspectionStatusChangesEvent_InspectionStatusChange_Status = 2
)

var InspectionStatusChangesEvent_InspectionStatusChange_Status_name = map[int32]string{
	0: "SCHEDULED",
	1: "IN_PROGRESS",
	2: "COMPLETED",
}
var InspectionStatusChangesEvent_InspectionStatusChange_Status_value = map[string]int32{
	"SCHEDULED":   0,
	"IN_PROGRESS": 1,
	"COMPLETED":   2,
}

func (x InspectionStatusChangesEvent_InspectionStatusChange_Status) String() string {
	return proto.EnumName(InspectionStatusChangesEvent_InspectionStatusChange_Status_name, int32(x))
}
func (InspectionStatusChangesEvent_InspectionStatusChange_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 0, 0}
}

type CreateDelegatedInspectionLinksRequest struct {
	AccountId            *happyco_type_v1.IntegrationID          `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Requests             []*CreateDelegatedInspectionLinkRequest `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
	SendEmail            bool                                    `protobuf:"varint,3,opt,name=send_email,json=sendEmail" json:"send_email,omitempty"`
	EmailSubjectTemplate string                                  `protobuf:"bytes,4,opt,name=email_subject_template,json=emailSubjectTemplate" json:"email_subject_template,omitempty"`
	EmailTemplateHtml    string                                  `protobuf:"bytes,5,opt,name=email_template_html,json=emailTemplateHtml" json:"email_template_html,omitempty"`
	EmailTemplateText    string                                  `protobuf:"bytes,6,opt,name=email_template_text,json=emailTemplateText" json:"email_template_text,omitempty"`
}

func (m *CreateDelegatedInspectionLinksRequest) Reset()         { *m = CreateDelegatedInspectionLinksRequest{} }
func (m *CreateDelegatedInspectionLinksRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDelegatedInspectionLinksRequest) ProtoMessage()    {}
func (*CreateDelegatedInspectionLinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0}
}

func (m *CreateDelegatedInspectionLinksRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *CreateDelegatedInspectionLinksRequest) GetRequests() []*CreateDelegatedInspectionLinkRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *CreateDelegatedInspectionLinksRequest) GetSendEmail() bool {
	if m != nil {
		return m.SendEmail
	}
	return false
}

func (m *CreateDelegatedInspectionLinksRequest) GetEmailSubjectTemplate() string {
	if m != nil {
		return m.EmailSubjectTemplate
	}
	return ""
}

func (m *CreateDelegatedInspectionLinksRequest) GetEmailTemplateHtml() string {
	if m != nil {
		return m.EmailTemplateHtml
	}
	return ""
}

func (m *CreateDelegatedInspectionLinksRequest) GetEmailTemplateText() string {
	if m != nil {
		return m.EmailTemplateText
	}
	return ""
}

type CreateDelegatedInspectionLinkRequest struct {
	Email        string                         `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	FirstName    string                         `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName     string                         `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	InspectionId *happyco_type_v1.IntegrationID `protobuf:"bytes,4,opt,name=inspection_id,json=inspectionId" json:"inspection_id,omitempty"`
	Expiry       *happyco_type_v11.DateTime     `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *CreateDelegatedInspectionLinkRequest) Reset()         { *m = CreateDelegatedInspectionLinkRequest{} }
func (m *CreateDelegatedInspectionLinkRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDelegatedInspectionLinkRequest) ProtoMessage()    {}
func (*CreateDelegatedInspectionLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1}
}

func (m *CreateDelegatedInspectionLinkRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateDelegatedInspectionLinkRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateDelegatedInspectionLinkRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreateDelegatedInspectionLinkRequest) GetInspectionId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionId
	}
	return nil
}

func (m *CreateDelegatedInspectionLinkRequest) GetExpiry() *happyco_type_v11.DateTime {
	if m != nil {
		return m.Expiry
	}
	return nil
}

type CreateDelegatedInspectionLinksResponse struct {
	Responses []*CreateDelegatedInspectionLinkResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *CreateDelegatedInspectionLinksResponse) Reset() {
	*m = CreateDelegatedInspectionLinksResponse{}
}
func (m *CreateDelegatedInspectionLinksResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDelegatedInspectionLinksResponse) ProtoMessage()    {}
func (*CreateDelegatedInspectionLinksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2}
}

func (m *CreateDelegatedInspectionLinksResponse) GetResponses() []*CreateDelegatedInspectionLinkResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CreateDelegatedInspectionLinkResponse struct {
	Link  string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CreateDelegatedInspectionLinkResponse) Reset()         { *m = CreateDelegatedInspectionLinkResponse{} }
func (m *CreateDelegatedInspectionLinkResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDelegatedInspectionLinkResponse) ProtoMessage()    {}
func (*CreateDelegatedInspectionLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *CreateDelegatedInspectionLinkResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateDelegatedInspectionLinkResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AddInspectionPhotosRequest struct {
	// * Account ID that the request applies to.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Requests to be performed. The responses will be an array of the
	// same length and order.
	Requests []*AddInspectionPhotoRequest `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
}

func (m *AddInspectionPhotosRequest) Reset()                    { *m = AddInspectionPhotosRequest{} }
func (m *AddInspectionPhotosRequest) String() string            { return proto.CompactTextString(m) }
func (*AddInspectionPhotosRequest) ProtoMessage()               {}
func (*AddInspectionPhotosRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddInspectionPhotosRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *AddInspectionPhotosRequest) GetRequests() []*AddInspectionPhotoRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type AddInspectionPhotoRequest struct {
	FolderId     *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	InspectionId *happyco_type_v1.IntegrationID `protobuf:"bytes,2,opt,name=inspection_id,json=inspectionId" json:"inspection_id,omitempty"`
	// * File name must include a valid image extension.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// * Data should contain the image data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AddInspectionPhotoRequest) Reset()                    { *m = AddInspectionPhotoRequest{} }
func (m *AddInspectionPhotoRequest) String() string            { return proto.CompactTextString(m) }
func (*AddInspectionPhotoRequest) ProtoMessage()               {}
func (*AddInspectionPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddInspectionPhotoRequest) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *AddInspectionPhotoRequest) GetInspectionId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionId
	}
	return nil
}

func (m *AddInspectionPhotoRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *AddInspectionPhotoRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddInspectionPhotosResponse struct {
	// * Responses is an array of the same length and order as the requests.
	Responses []*AddInspectionPhotoResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *AddInspectionPhotosResponse) Reset()                    { *m = AddInspectionPhotosResponse{} }
func (m *AddInspectionPhotosResponse) String() string            { return proto.CompactTextString(m) }
func (*AddInspectionPhotosResponse) ProtoMessage()               {}
func (*AddInspectionPhotosResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddInspectionPhotosResponse) GetResponses() []*AddInspectionPhotoResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type AddInspectionPhotoResponse struct {
	PhotoId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=photo_id,json=photoId" json:"photo_id,omitempty"`
	// * Error contains an error response for a request or an empty string.
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *AddInspectionPhotoResponse) Reset()                    { *m = AddInspectionPhotoResponse{} }
func (m *AddInspectionPhotoResponse) String() string            { return proto.CompactTextString(m) }
func (*AddInspectionPhotoResponse) ProtoMessage()               {}
func (*AddInspectionPhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddInspectionPhotoResponse) GetPhotoId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.PhotoId
	}
	return nil
}

func (m *AddInspectionPhotoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// * Inspection represents an inspection in its 3 states: scheduled, in_progress
// and completed.
type Inspection struct {
	// * ID of inspection.
	Id *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// * Account ID that the inspection belongs to.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderId  *happyco_type_v1.IntegrationID `protobuf:"bytes,3,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	// * Asset is the parent that inspection is attached to. This field must
	// reference a non archived asset in the same folder as the template
	// referenced below.
	AssetId *happyco_type_v1.IntegrationID `protobuf:"bytes,4,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	// * Template is the prototype of an inspection thats allow it to be
	// configured on the fly. This field must reference a non archived
	// template in the same folder as the parent asset referenced above.
	TemplateId *happyco_type_v1.IntegrationID `protobuf:"bytes,5,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	// * Template outline when set on a scheduled inspection forces a
	// different outline prototype to be used when the inspection moves
	// from scheduled to in_progress.
	TemplateOutline string `protobuf:"bytes,6,opt,name=template_outline,json=templateOutline" json:"template_outline,omitempty"`
	// * Status can be be one of scheduled, in_progress and completed.
	// Status message types ScheduleInspection and InspectionData include
	// the data relevant to the status. Transitioning an inspection from
	// in_progress or completed to scheduled will result in the loss of
	// data and therefore raises an error.
	//
	// Types that are valid to be assigned to Status:
	//	*Inspection_Scheduled
	//	*Inspection_InProgress
	//	*Inspection_Completed
	Status     isInspection_Status        `protobuf_oneof:"status"`
	UpdateTime *happyco_type_v11.DateTime `protobuf:"bytes,10,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Inspection) Reset()                    { *m = Inspection{} }
func (m *Inspection) String() string            { return proto.CompactTextString(m) }
func (*Inspection) ProtoMessage()               {}
func (*Inspection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isInspection_Status interface {
	isInspection_Status()
}

type Inspection_Scheduled struct {
	Scheduled *ScheduledInspection `protobuf:"bytes,7,opt,name=scheduled,oneof"`
}
type Inspection_InProgress struct {
	InProgress *InspectionData `protobuf:"bytes,8,opt,name=in_progress,json=inProgress,oneof"`
}
type Inspection_Completed struct {
	Completed *InspectionData `protobuf:"bytes,9,opt,name=completed,oneof"`
}

func (*Inspection_Scheduled) isInspection_Status()  {}
func (*Inspection_InProgress) isInspection_Status() {}
func (*Inspection_Completed) isInspection_Status()  {}

func (m *Inspection) GetStatus() isInspection_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Inspection) GetId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Inspection) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *Inspection) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *Inspection) GetAssetId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AssetId
	}
	return nil
}

func (m *Inspection) GetTemplateId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.TemplateId
	}
	return nil
}

func (m *Inspection) GetTemplateOutline() string {
	if m != nil {
		return m.TemplateOutline
	}
	return ""
}

func (m *Inspection) GetScheduled() *ScheduledInspection {
	if x, ok := m.GetStatus().(*Inspection_Scheduled); ok {
		return x.Scheduled
	}
	return nil
}

func (m *Inspection) GetInProgress() *InspectionData {
	if x, ok := m.GetStatus().(*Inspection_InProgress); ok {
		return x.InProgress
	}
	return nil
}

func (m *Inspection) GetCompleted() *InspectionData {
	if x, ok := m.GetStatus().(*Inspection_Completed); ok {
		return x.Completed
	}
	return nil
}

func (m *Inspection) GetUpdateTime() *happyco_type_v11.DateTime {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Inspection) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Inspection_OneofMarshaler, _Inspection_OneofUnmarshaler, _Inspection_OneofSizer, []interface{}{
		(*Inspection_Scheduled)(nil),
		(*Inspection_InProgress)(nil),
		(*Inspection_Completed)(nil),
	}
}

func _Inspection_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Inspection)
	// status
	switch x := m.Status.(type) {
	case *Inspection_Scheduled:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scheduled); err != nil {
			return err
		}
	case *Inspection_InProgress:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InProgress); err != nil {
			return err
		}
	case *Inspection_Completed:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Completed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Inspection.Status has unexpected type %T", x)
	}
	return nil
}

func _Inspection_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Inspection)
	switch tag {
	case 7: // status.scheduled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScheduledInspection)
		err := b.DecodeMessage(msg)
		m.Status = &Inspection_Scheduled{msg}
		return true, err
	case 8: // status.in_progress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InspectionData)
		err := b.DecodeMessage(msg)
		m.Status = &Inspection_InProgress{msg}
		return true, err
	case 9: // status.completed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InspectionData)
		err := b.DecodeMessage(msg)
		m.Status = &Inspection_Completed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Inspection_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Inspection)
	// status
	switch x := m.Status.(type) {
	case *Inspection_Scheduled:
		s := proto.Size(x.Scheduled)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Inspection_InProgress:
		s := proto.Size(x.InProgress)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Inspection_Completed:
		s := proto.Size(x.Completed)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// * Scheduled inspection is the message type for inspection status scheduled. It
// can include a specific scheduled date for the inspection and overrides for
// header and footer fields when the inspection status transitions to
// in_progress.
type ScheduledInspection struct {
	// * Schedule date is an optional field that contians the expected start
	// time or due date of the inspection.
	ScheduleDate *happyco_type_v11.DateTime `protobuf:"bytes,1,opt,name=schedule_date,json=scheduleDate" json:"schedule_date,omitempty"`
	// * Header notes is an optional override that will be used instead of
	// the header fields defined by the template.
	HeaderFields []*happyco_inspect_type_v1.HeaderField `protobuf:"bytes,2,rep,name=header_fields,json=headerFields" json:"header_fields,omitempty"`
	// * Footer notes is an optional override that will be used instead of
	// the footer fields defined by the template.
	FooterFields []*happyco_inspect_type_v1.FooterField `protobuf:"bytes,3,rep,name=footer_fields,json=footerFields" json:"footer_fields,omitempty"`
	Sections     []*happyco_inspect_type_v1.Section     `protobuf:"bytes,4,rep,name=sections" json:"sections,omitempty"`
}

func (m *ScheduledInspection) Reset()                    { *m = ScheduledInspection{} }
func (m *ScheduledInspection) String() string            { return proto.CompactTextString(m) }
func (*ScheduledInspection) ProtoMessage()               {}
func (*ScheduledInspection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ScheduledInspection) GetScheduleDate() *happyco_type_v11.DateTime {
	if m != nil {
		return m.ScheduleDate
	}
	return nil
}

func (m *ScheduledInspection) GetHeaderFields() []*happyco_inspect_type_v1.HeaderField {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *ScheduledInspection) GetFooterFields() []*happyco_inspect_type_v1.FooterField {
	if m != nil {
		return m.FooterFields
	}
	return nil
}

func (m *ScheduledInspection) GetSections() []*happyco_inspect_type_v1.Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// * Inspection data has fields containing all of the inspection data for an
// inspection with a status of in_progress or completed.
type InspectionData struct {
	// * Started at is a non optional field that is set to the actual time
	// that an inspection transitions from scheduled to in_progress. This
	// time comes from the device where the transition occurs on as the
	// user may be offline.
	StartedAt *happyco_type_v11.DateTime `protobuf:"bytes,1,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	// * Ended at is an optional field for in_progress inspections but
	// required for completed inspections. It is set to the actual time
	// that an inspection transtions from in_progress to complete. This
	// time comes from the device where the transition occurs as the suer
	// may be offline.
	EndedAt *happyco_type_v11.DateTime `protobuf:"bytes,2,opt,name=ended_at,json=endedAt" json:"ended_at,omitempty"`
	// * User started at is an optional field that can appear on reports.
	// This can be updated by the user to a specific time. When an
	// inspection transitions from scheduled to in_progress the
	// schedule_date becomes this field.
	UserStartedAt *happyco_type_v11.DateTime `protobuf:"bytes,3,opt,name=user_started_at,json=userStartedAt" json:"user_started_at,omitempty"`
	// * User ended at is an optional field that can appear on reports.
	// This can be updated by the user to a specific time.
	UserEndedAt *happyco_type_v11.DateTime `protobuf:"bytes,4,opt,name=user_ended_at,json=userEndedAt" json:"user_ended_at,omitempty"`
	// * HeaderFields are shown on the top of an inspection and reports
	// generated from it.
	HeaderFields []*happyco_inspect_type_v1.HeaderField `protobuf:"bytes,7,rep,name=header_fields,json=headerFields" json:"header_fields,omitempty"`
	// * Sections and their items hold most of the inspection data; selected
	// ratings, notes, and photos.
	Sections []*happyco_inspect_type_v1.Section `protobuf:"bytes,6,rep,name=sections" json:"sections,omitempty"`
	// * FooterFields are shown at the end of an inspection and reports
	// generated from it.
	FooterFields []*happyco_inspect_type_v1.FooterField `protobuf:"bytes,8,rep,name=footer_fields,json=footerFields" json:"footer_fields,omitempty"`
	// * Rating groups is a map of unique keys within an inspection to
	// rating groups. Each item within this inspection must reference a
	// rating group with a key in this map.
	RatingGroups map[string]*happyco_inspect_type_v1.RatingGroups `protobuf:"bytes,5,rep,name=rating_groups,json=ratingGroups" json:"rating_groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InspectionData) Reset()                    { *m = InspectionData{} }
func (m *InspectionData) String() string            { return proto.CompactTextString(m) }
func (*InspectionData) ProtoMessage()               {}
func (*InspectionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InspectionData) GetStartedAt() *happyco_type_v11.DateTime {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *InspectionData) GetEndedAt() *happyco_type_v11.DateTime {
	if m != nil {
		return m.EndedAt
	}
	return nil
}

func (m *InspectionData) GetUserStartedAt() *happyco_type_v11.DateTime {
	if m != nil {
		return m.UserStartedAt
	}
	return nil
}

func (m *InspectionData) GetUserEndedAt() *happyco_type_v11.DateTime {
	if m != nil {
		return m.UserEndedAt
	}
	return nil
}

func (m *InspectionData) GetHeaderFields() []*happyco_inspect_type_v1.HeaderField {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *InspectionData) GetSections() []*happyco_inspect_type_v1.Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *InspectionData) GetFooterFields() []*happyco_inspect_type_v1.FooterField {
	if m != nil {
		return m.FooterFields
	}
	return nil
}

func (m *InspectionData) GetRatingGroups() map[string]*happyco_inspect_type_v1.RatingGroups {
	if m != nil {
		return m.RatingGroups
	}
	return nil
}

// * List inspection request is used for fetching inspections. It can be
// filtered to specific inspections, assets or folders. If the intent is to be
// notified when an inspection undergoes a status transition please use the
// InspectionEventService.
type ListInspectionsRequest struct {
	// * Account ID that the request applies to. For custom integrations
	// (i.e. not integration partners) it can be omitted.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Folder IDs is an optional filter that lists inspections only for
	// specific folders.
	FolderIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,2,rep,name=folder_ids,json=folderIds" json:"folder_ids,omitempty"`
	// * Asset IDs is an optional filter that lists inspections only for
	// specific assets.
	AssetIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,3,rep,name=asset_ids,json=assetIds" json:"asset_ids,omitempty"`
	// * Inspection IDs  is an optional filter that lists only specific
	// inspections. This is commonly used to get a single inspection.
	InspectionIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,4,rep,name=inspection_ids,json=inspectionIds" json:"inspection_ids,omitempty"`
	// * Archived when set to true returns archived inspections only.
	Archived bool `protobuf:"varint,5,opt,name=archived" json:"archived,omitempty"`
	// * Paging message that contains information about the page being
	// requested. This message is usually copied from a previous list
	// request's response.
	Paging        *happyco_type_v12.Paging   `protobuf:"bytes,6,opt,name=paging" json:"paging,omitempty"`
	MinUpdateTime *happyco_type_v11.DateTime `protobuf:"bytes,7,opt,name=min_update_time,json=minUpdateTime" json:"min_update_time,omitempty"`
	MaxUpdateTime *happyco_type_v11.DateTime `protobuf:"bytes,8,opt,name=max_update_time,json=maxUpdateTime" json:"max_update_time,omitempty"`
}

func (m *ListInspectionsRequest) Reset()                    { *m = ListInspectionsRequest{} }
func (m *ListInspectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListInspectionsRequest) ProtoMessage()               {}
func (*ListInspectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListInspectionsRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *ListInspectionsRequest) GetFolderIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderIds
	}
	return nil
}

func (m *ListInspectionsRequest) GetAssetIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AssetIds
	}
	return nil
}

func (m *ListInspectionsRequest) GetInspectionIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionIds
	}
	return nil
}

func (m *ListInspectionsRequest) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *ListInspectionsRequest) GetPaging() *happyco_type_v12.Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

func (m *ListInspectionsRequest) GetMinUpdateTime() *happyco_type_v11.DateTime {
	if m != nil {
		return m.MinUpdateTime
	}
	return nil
}

func (m *ListInspectionsRequest) GetMaxUpdateTime() *happyco_type_v11.DateTime {
	if m != nil {
		return m.MaxUpdateTime
	}
	return nil
}

// * List inspection response is a page of fetched inspection results. It
// includes a previous and next page token that can be passed into subsequent
// list inspection requests.
type ListInspectionsResponse struct {
	// * Inspections contains the results for this page.
	Inspections []*Inspection `protobuf:"bytes,1,rep,name=inspections" json:"inspections,omitempty"`
	// * Previous page is an token that will be present for all pages after
	// the first.
	PreviousPage *happyco_type_v12.Paging `protobuf:"bytes,2,opt,name=previous_page,json=previousPage" json:"previous_page,omitempty"`
	// * Next page is an token that will be present for all pages except the
	// last.
	NextPage *happyco_type_v12.Paging `protobuf:"bytes,3,opt,name=next_page,json=nextPage" json:"next_page,omitempty"`
}

func (m *ListInspectionsResponse) Reset()                    { *m = ListInspectionsResponse{} }
func (m *ListInspectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListInspectionsResponse) ProtoMessage()               {}
func (*ListInspectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListInspectionsResponse) GetInspections() []*Inspection {
	if m != nil {
		return m.Inspections
	}
	return nil
}

func (m *ListInspectionsResponse) GetPreviousPage() *happyco_type_v12.Paging {
	if m != nil {
		return m.PreviousPage
	}
	return nil
}

func (m *ListInspectionsResponse) GetNextPage() *happyco_type_v12.Paging {
	if m != nil {
		return m.NextPage
	}
	return nil
}

// * Create Inspection request can be used to create new valid scheduled, in
// progress or completed inspections. Two inspections cannot have the same
// external ID and all must be valid for the request to complete. This includes
// archived inspection IDs.
type CreateInspectionsRequest struct {
	// * Account ID that the request applies to. For custom integrations
	// (i.e. not integration partners) it can be omitted.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Inspections to be created.
	Inspections []*Inspection `protobuf:"bytes,2,rep,name=inspections" json:"inspections,omitempty"`
}

func (m *CreateInspectionsRequest) Reset()                    { *m = CreateInspectionsRequest{} }
func (m *CreateInspectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateInspectionsRequest) ProtoMessage()               {}
func (*CreateInspectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateInspectionsRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *CreateInspectionsRequest) GetInspections() []*Inspection {
	if m != nil {
		return m.Inspections
	}
	return nil
}

// * Create Inspection reposne contains a list of inspection ids (including
// happyco internal ids) for inspections created with a create inspection
// request.
type CreateInspectionsResponse struct {
	InspectionIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,1,rep,name=inspection_ids,json=inspectionIds" json:"inspection_ids,omitempty"`
}

func (m *CreateInspectionsResponse) Reset()                    { *m = CreateInspectionsResponse{} }
func (m *CreateInspectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateInspectionsResponse) ProtoMessage()               {}
func (*CreateInspectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateInspectionsResponse) GetInspectionIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionIds
	}
	return nil
}

// * Create Inspection request can be used to update existing valid scheduled,
// in progress completed, and archived inspections. Two inspections cannot have
// the same external ID and all must be valid for the request to complete. This
// includes archived inspection IDs. An update cannot cause an inspection to
// transition from in_progress to scheduled.
type UpdateInspectionsRequest struct {
	// * Account ID that the request applies to. For custom integrations
	// (i.e. not integration partners) it can be omitted.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Inspection to be updated.
	Inspections []*Inspection `protobuf:"bytes,2,rep,name=inspections" json:"inspections,omitempty"`
}

func (m *UpdateInspectionsRequest) Reset()                    { *m = UpdateInspectionsRequest{} }
func (m *UpdateInspectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateInspectionsRequest) ProtoMessage()               {}
func (*UpdateInspectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateInspectionsRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *UpdateInspectionsRequest) GetInspections() []*Inspection {
	if m != nil {
		return m.Inspections
	}
	return nil
}

// * Update inspection response contains no data and indicates success of all
// updates.
type UpdateInspectionsResponse struct {
}

func (m *UpdateInspectionsResponse) Reset()                    { *m = UpdateInspectionsResponse{} }
func (m *UpdateInspectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateInspectionsResponse) ProtoMessage()               {}
func (*UpdateInspectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// * SetInspectionsArchivedRequest is used to archive and unarchive  multiple inspections.
type SetInspectionsArchivedRequest struct {
	// * Account ID that the request applies to. For custom integrations
	// (i.e. not integration partners) it can be omitted.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Inspection IDs that should be updated.
	InspectionIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,3,rep,name=inspection_ids,json=inspectionIds" json:"inspection_ids,omitempty"`
}

func (m *SetInspectionsArchivedRequest) Reset()                    { *m = SetInspectionsArchivedRequest{} }
func (m *SetInspectionsArchivedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetInspectionsArchivedRequest) ProtoMessage()               {}
func (*SetInspectionsArchivedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SetInspectionsArchivedRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *SetInspectionsArchivedRequest) GetInspectionIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionIds
	}
	return nil
}

// * SetInspectionsArchivedResponse contains no data and indicates success of
// the operation.
type SetInspectionsArchivedResponse struct {
}

func (m *SetInspectionsArchivedResponse) Reset()                    { *m = SetInspectionsArchivedResponse{} }
func (m *SetInspectionsArchivedResponse) String() string            { return proto.CompactTextString(m) }
func (*SetInspectionsArchivedResponse) ProtoMessage()               {}
func (*SetInspectionsArchivedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type InspectionStatusChangesEventRequest struct {
	// * Account ID that the request applies to. For custom integrations
	// (i.e. not integration partners) it can be omitted.
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// * Options the client can set to configure the returned event stream.
	// See EventHandlerOptions for more details.
	Options *happyco_type_v13.EventHandlerOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *InspectionStatusChangesEventRequest) Reset()         { *m = InspectionStatusChangesEventRequest{} }
func (m *InspectionStatusChangesEventRequest) String() string { return proto.CompactTextString(m) }
func (*InspectionStatusChangesEventRequest) ProtoMessage()    {}
func (*InspectionStatusChangesEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *InspectionStatusChangesEventRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *InspectionStatusChangesEventRequest) GetOptions() *happyco_type_v13.EventHandlerOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// * Inspection status change events are emitted from streams requested with
// OnInspectionStatusChanges.
type InspectionStatusChangesEvent struct {
	Event   *happyco_type_v13.Event                                `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Changes []*InspectionStatusChangesEvent_InspectionStatusChange `protobuf:"bytes,2,rep,name=changes" json:"changes,omitempty"`
}

func (m *InspectionStatusChangesEvent) Reset()                    { *m = InspectionStatusChangesEvent{} }
func (m *InspectionStatusChangesEvent) String() string            { return proto.CompactTextString(m) }
func (*InspectionStatusChangesEvent) ProtoMessage()               {}
func (*InspectionStatusChangesEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *InspectionStatusChangesEvent) GetEvent() *happyco_type_v13.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *InspectionStatusChangesEvent) GetChanges() []*InspectionStatusChangesEvent_InspectionStatusChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type InspectionStatusChangesEvent_InspectionStatusChange struct {
	// * Inspection ID can be used to fetch the inspection with a
	// filtered list inspections request
	InspectionId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=inspection_id,json=inspectionId" json:"inspection_id,omitempty"`
	// * From status is the status prior to the change event.
	FromStatus InspectionStatusChangesEvent_InspectionStatusChange_Status `protobuf:"varint,2,opt,name=from_status,json=fromStatus,enum=happyco.inspect.inspection.v1.InspectionStatusChangesEvent_InspectionStatusChange_Status" json:"from_status,omitempty"`
	// * To status is the status post the change event.
	ToStatus InspectionStatusChangesEvent_InspectionStatusChange_Status `protobuf:"varint,3,opt,name=to_status,json=toStatus,enum=happyco.inspect.inspection.v1.InspectionStatusChangesEvent_InspectionStatusChange_Status" json:"to_status,omitempty"`
}

func (m *InspectionStatusChangesEvent_InspectionStatusChange) Reset() {
	*m = InspectionStatusChangesEvent_InspectionStatusChange{}
}
func (m *InspectionStatusChangesEvent_InspectionStatusChange) String() string {
	return proto.CompactTextString(m)
}
func (*InspectionStatusChangesEvent_InspectionStatusChange) ProtoMessage() {}
func (*InspectionStatusChangesEvent_InspectionStatusChange) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20, 0}
}

func (m *InspectionStatusChangesEvent_InspectionStatusChange) GetInspectionId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.InspectionId
	}
	return nil
}

func (m *InspectionStatusChangesEvent_InspectionStatusChange) GetFromStatus() InspectionStatusChangesEvent_InspectionStatusChange_Status {
	if m != nil {
		return m.FromStatus
	}
	return InspectionStatusChangesEvent_InspectionStatusChange_SCHEDULED
}

func (m *InspectionStatusChangesEvent_InspectionStatusChange) GetToStatus() InspectionStatusChangesEvent_InspectionStatusChange_Status {
	if m != nil {
		return m.ToStatus
	}
	return InspectionStatusChangesEvent_InspectionStatusChange_SCHEDULED
}

// * Inspection status changes event ack is used to acknowledge or request time
// extensions for one or more events.
type InspectionStatusChangesEventAck struct {
	// * See EventAck for more details.
	Ack *happyco_type_v13.EventAck `protobuf:"bytes,1,opt,name=ack" json:"ack,omitempty"`
}

func (m *InspectionStatusChangesEventAck) Reset()         { *m = InspectionStatusChangesEventAck{} }
func (m *InspectionStatusChangesEventAck) String() string { return proto.CompactTextString(m) }
func (*InspectionStatusChangesEventAck) ProtoMessage()    {}
func (*InspectionStatusChangesEventAck) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *InspectionStatusChangesEventAck) GetAck() *happyco_type_v13.EventAck {
	if m != nil {
		return m.Ack
	}
	return nil
}

// * InspectionStatusChangeEventAckResponse contains no data but indicates
// successful acknowledgement.
type InspectionStatusChangesEventAckResponse struct {
}

func (m *InspectionStatusChangesEventAckResponse) Reset() {
	*m = InspectionStatusChangesEventAckResponse{}
}
func (m *InspectionStatusChangesEventAckResponse) String() string { return proto.CompactTextString(m) }
func (*InspectionStatusChangesEventAckResponse) ProtoMessage()    {}
func (*InspectionStatusChangesEventAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func init() {
	proto.RegisterType((*CreateDelegatedInspectionLinksRequest)(nil), "happyco.inspect.inspection.v1.CreateDelegatedInspectionLinksRequest")
	proto.RegisterType((*CreateDelegatedInspectionLinkRequest)(nil), "happyco.inspect.inspection.v1.CreateDelegatedInspectionLinkRequest")
	proto.RegisterType((*CreateDelegatedInspectionLinksResponse)(nil), "happyco.inspect.inspection.v1.CreateDelegatedInspectionLinksResponse")
	proto.RegisterType((*CreateDelegatedInspectionLinkResponse)(nil), "happyco.inspect.inspection.v1.CreateDelegatedInspectionLinkResponse")
	proto.RegisterType((*AddInspectionPhotosRequest)(nil), "happyco.inspect.inspection.v1.AddInspectionPhotosRequest")
	proto.RegisterType((*AddInspectionPhotoRequest)(nil), "happyco.inspect.inspection.v1.AddInspectionPhotoRequest")
	proto.RegisterType((*AddInspectionPhotosResponse)(nil), "happyco.inspect.inspection.v1.AddInspectionPhotosResponse")
	proto.RegisterType((*AddInspectionPhotoResponse)(nil), "happyco.inspect.inspection.v1.AddInspectionPhotoResponse")
	proto.RegisterType((*Inspection)(nil), "happyco.inspect.inspection.v1.Inspection")
	proto.RegisterType((*ScheduledInspection)(nil), "happyco.inspect.inspection.v1.ScheduledInspection")
	proto.RegisterType((*InspectionData)(nil), "happyco.inspect.inspection.v1.InspectionData")
	proto.RegisterType((*ListInspectionsRequest)(nil), "happyco.inspect.inspection.v1.ListInspectionsRequest")
	proto.RegisterType((*ListInspectionsResponse)(nil), "happyco.inspect.inspection.v1.ListInspectionsResponse")
	proto.RegisterType((*CreateInspectionsRequest)(nil), "happyco.inspect.inspection.v1.CreateInspectionsRequest")
	proto.RegisterType((*CreateInspectionsResponse)(nil), "happyco.inspect.inspection.v1.CreateInspectionsResponse")
	proto.RegisterType((*UpdateInspectionsRequest)(nil), "happyco.inspect.inspection.v1.UpdateInspectionsRequest")
	proto.RegisterType((*UpdateInspectionsResponse)(nil), "happyco.inspect.inspection.v1.UpdateInspectionsResponse")
	proto.RegisterType((*SetInspectionsArchivedRequest)(nil), "happyco.inspect.inspection.v1.SetInspectionsArchivedRequest")
	proto.RegisterType((*SetInspectionsArchivedResponse)(nil), "happyco.inspect.inspection.v1.SetInspectionsArchivedResponse")
	proto.RegisterType((*InspectionStatusChangesEventRequest)(nil), "happyco.inspect.inspection.v1.InspectionStatusChangesEventRequest")
	proto.RegisterType((*InspectionStatusChangesEvent)(nil), "happyco.inspect.inspection.v1.InspectionStatusChangesEvent")
	proto.RegisterType((*InspectionStatusChangesEvent_InspectionStatusChange)(nil), "happyco.inspect.inspection.v1.InspectionStatusChangesEvent.InspectionStatusChange")
	proto.RegisterType((*InspectionStatusChangesEventAck)(nil), "happyco.inspect.inspection.v1.InspectionStatusChangesEventAck")
	proto.RegisterType((*InspectionStatusChangesEventAckResponse)(nil), "happyco.inspect.inspection.v1.InspectionStatusChangesEventAckResponse")
	proto.RegisterEnum("happyco.inspect.inspection.v1.InspectionStatusChangesEvent_InspectionStatusChange_Status", InspectionStatusChangesEvent_InspectionStatusChange_Status_name, InspectionStatusChangesEvent_InspectionStatusChange_Status_value)
}

func init() { proto.RegisterFile("happyco/inspect/inspection/v1/inspection.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x59, 0xbd, 0x6f, 0x1b, 0xc9,
	0x15, 0xf7, 0x92, 0xfa, 0x58, 0x3e, 0x4a, 0xb6, 0x3c, 0x36, 0x7c, 0x14, 0x65, 0xfb, 0x84, 0x3d,
	0x3b, 0x96, 0x7d, 0x77, 0xd4, 0x99, 0x71, 0x72, 0xfe, 0x3e, 0xc8, 0x22, 0x7d, 0x22, 0xe2, 0xb3,
	0x94, 0xa5, 0x8d, 0x20, 0x69, 0x16, 0x63, 0xee, 0x90, 0xdc, 0x68, 0xb9, 0xbb, 0xd9, 0x19, 0x12,
	0x52, 0xca, 0x94, 0x41, 0xba, 0x74, 0x29, 0x52, 0x5d, 0x0e, 0x48, 0x91, 0x22, 0x45, 0xda, 0x00,
	0x29, 0x82, 0x74, 0x69, 0xd2, 0xa5, 0x4b, 0x70, 0x6d, 0x80, 0xfc, 0x01, 0x29, 0x82, 0x99, 0x9d,
	0xe1, 0xae, 0xb4, 0x24, 0x97, 0x22, 0x75, 0xc0, 0x55, 0xda, 0x99, 0xf7, 0xde, 0x6f, 0xde, 0xc7,
	0x6f, 0xe6, 0x0d, 0x47, 0x50, 0xe9, 0xe2, 0x20, 0x38, 0x6e, 0xf9, 0xdb, 0x8e, 0x47, 0x03, 0xd2,
	0x62, 0xea, 0xaf, 0xe3, 0x7b, 0xdb, 0x83, 0xfb, 0x89, 0x51, 0x25, 0x08, 0x7d, 0xe6, 0xa3, 0x1b,
	0x52, 0xbf, 0x22, 0x25, 0x95, 0x84, 0xc6, 0xe0, 0x7e, 0xf9, 0x96, 0x82, 0x63, 0xc7, 0x01, 0x89,
	0x00, 0x18, 0xe9, 0x84, 0x98, 0xcb, 0x2d, 0xc7, 0x8e, 0x40, 0xca, 0xe5, 0xd3, 0x5a, 0x36, 0x66,
	0x44, 0xca, 0xae, 0x9f, 0x96, 0x05, 0xb8, 0xe3, 0x78, 0x1d, 0x29, 0xdd, 0x38, 0x2d, 0x25, 0x03,
	0xe2, 0x31, 0x29, 0xbc, 0x77, 0x3a, 0x96, 0xd8, 0x09, 0x31, 0xb6, 0xf8, 0x58, 0x2d, 0xd3, 0xf1,
	0xfd, 0x8e, 0x4b, 0xb6, 0x71, 0xe0, 0x6c, 0x63, 0xcf, 0xf3, 0x99, 0x70, 0x91, 0x46, 0x52, 0xe3,
	0x7f, 0x39, 0xb8, 0xbd, 0x1b, 0x12, 0xcc, 0x48, 0x8d, 0xb8, 0xa4, 0x83, 0x19, 0xb1, 0x1b, 0xc3,
	0x38, 0x5f, 0x39, 0xde, 0x21, 0x35, 0xc9, 0xcf, 0xfa, 0x84, 0x32, 0xf4, 0x0c, 0x00, 0xb7, 0x5a,
	0x7e, 0xdf, 0x63, 0x96, 0x63, 0x97, 0xb4, 0x4d, 0x6d, 0xab, 0x58, 0xbd, 0xa9, 0x92, 0x5a, 0x11,
	0x0b, 0x0e, 0xee, 0x57, 0x1a, 0x71, 0x16, 0x1a, 0x35, 0xb3, 0x20, 0x2d, 0x1a, 0x36, 0xb2, 0x40,
	0x0f, 0x23, 0x24, 0x5a, 0xca, 0x6d, 0xe6, 0xb7, 0x8a, 0xd5, 0xdd, 0xca, 0xc4, 0x0c, 0x57, 0x26,
	0xba, 0x25, 0xbd, 0x32, 0x87, 0xa0, 0xe8, 0x06, 0x00, 0x25, 0x9e, 0x6d, 0x91, 0x1e, 0x76, 0xdc,
	0x52, 0x7e, 0x53, 0xdb, 0xd2, 0xcd, 0x02, 0x9f, 0xa9, 0xf3, 0x09, 0xf4, 0x00, 0xae, 0x09, 0x89,
	0x45, 0xfb, 0xef, 0x7e, 0x2a, 0x52, 0x44, 0x7a, 0x81, 0x8b, 0x19, 0x29, 0x2d, 0x6c, 0x6a, 0x5b,
	0x05, 0xf3, 0xaa, 0x90, 0x36, 0x23, 0xe1, 0x1b, 0x29, 0x43, 0x15, 0xb8, 0x12, 0x59, 0x29, 0x6d,
	0xab, 0xcb, 0x7a, 0x6e, 0x69, 0x51, 0x98, 0x5c, 0x16, 0x22, 0xa5, 0xbb, 0xc7, 0x7a, 0xee, 0x08,
	0x7d, 0x46, 0x8e, 0x58, 0x69, 0x69, 0x84, 0xfe, 0x1b, 0x72, 0xc4, 0x8c, 0xff, 0x6a, 0x70, 0x6b,
	0x9a, 0x38, 0xd1, 0x55, 0x58, 0x8c, 0x02, 0xd3, 0x04, 0x54, 0x34, 0xe0, 0x31, 0xb7, 0x9d, 0x90,
	0x32, 0xcb, 0xc3, 0x3d, 0x52, 0xca, 0x09, 0x51, 0x41, 0xcc, 0xbc, 0xc6, 0x3d, 0x82, 0x36, 0xa0,
	0xe0, 0x62, 0x25, 0xcd, 0x0b, 0xa9, 0xce, 0x27, 0x84, 0x70, 0x17, 0x56, 0xe3, 0x7c, 0xf3, 0x92,
	0x2e, 0x4c, 0x55, 0xd2, 0x95, 0xd8, 0xa8, 0x61, 0xa3, 0xfb, 0xb0, 0x44, 0x8e, 0x02, 0x27, 0x3c,
	0x16, 0x29, 0x29, 0x56, 0xd7, 0x53, 0xd6, 0x35, 0x1e, 0xaa, 0xd3, 0x23, 0xa6, 0x54, 0x34, 0x7e,
	0xa5, 0xc1, 0x77, 0xb2, 0x18, 0x47, 0x03, 0xdf, 0xa3, 0x04, 0xbd, 0x83, 0x42, 0x28, 0xbf, 0x69,
	0x49, 0x13, 0xa4, 0xa9, 0xcd, 0x47, 0x9a, 0x08, 0xcc, 0x8c, 0x61, 0x8d, 0x1f, 0x66, 0xf0, 0x7f,
	0xe8, 0x0c, 0x82, 0x05, 0xd7, 0xf1, 0x0e, 0x65, 0x01, 0xc4, 0xb7, 0xa8, 0x4a, 0x18, 0xfa, 0xa1,
	0x4c, 0x7d, 0x34, 0x30, 0xfe, 0xa8, 0x41, 0x79, 0xc7, 0x4e, 0xe0, 0x1c, 0x74, 0x7d, 0xe6, 0x9f,
	0xd7, 0x46, 0x7a, 0x93, 0xda, 0x48, 0x0f, 0x33, 0x72, 0x92, 0xf6, 0x25, 0xb5, 0x7b, 0x8c, 0xbf,
	0x6b, 0xb0, 0x3e, 0x56, 0x0f, 0x3d, 0x81, 0x42, 0xdb, 0x77, 0x6d, 0x12, 0x4e, 0xef, 0xb1, 0x1e,
	0x19, 0x34, 0xec, 0x34, 0xd1, 0x72, 0x33, 0x10, 0x6d, 0x03, 0x0a, 0x6d, 0xc7, 0x25, 0x27, 0xa8,
	0xcc, 0x27, 0x04, 0x95, 0x11, 0x2c, 0xd8, 0x98, 0x61, 0xc1, 0xe0, 0x15, 0x53, 0x7c, 0x1b, 0x03,
	0xd8, 0x18, 0x59, 0x03, 0x59, 0xcd, 0x1f, 0xa5, 0xa9, 0xf5, 0x68, 0x86, 0x34, 0xa6, 0xf9, 0xd4,
	0x1b, 0x55, 0xfb, 0xe1, 0xb2, 0x8f, 0x40, 0x0f, 0xf8, 0xc4, 0xf4, 0x79, 0x5c, 0x16, 0xfa, 0x0d,
	0x7b, 0x0c, 0xd7, 0x7e, 0xb3, 0x08, 0x10, 0x2f, 0x86, 0x2a, 0x90, 0x9b, 0x1a, 0x39, 0xe7, 0xd8,
	0xa7, 0xb8, 0x98, 0x3b, 0x2b, 0x17, 0x4f, 0xf0, 0x22, 0x7f, 0x46, 0x5e, 0x3c, 0x02, 0x1d, 0x53,
	0x4a, 0xd8, 0xf4, 0x67, 0xcf, 0xb2, 0xd0, 0x6f, 0xd8, 0xe8, 0x33, 0x28, 0x0e, 0x0f, 0x58, 0xc7,
	0x96, 0x67, 0x4f, 0x96, 0x35, 0x28, 0x93, 0x86, 0x8d, 0xee, 0xc2, 0xda, 0x10, 0xc0, 0xef, 0x33,
	0xd7, 0xf1, 0x88, 0x3c, 0xa4, 0x2f, 0xa9, 0xf9, 0xfd, 0x68, 0x1a, 0x99, 0x50, 0xa0, 0xad, 0x2e,
	0xb1, 0xfb, 0x2e, 0xb1, 0x4b, 0xcb, 0x62, 0xa5, 0x6a, 0x06, 0x53, 0x9a, 0x4a, 0x3f, 0xae, 0xcc,
	0xde, 0x05, 0x33, 0x86, 0x41, 0x07, 0x50, 0x74, 0x3c, 0x2b, 0x08, 0xfd, 0x4e, 0x48, 0x28, 0x2d,
	0xe9, 0x02, 0xf5, 0xe3, 0x0c, 0xd4, 0x18, 0xac, 0x86, 0x19, 0xde, 0xbb, 0x60, 0x82, 0xe3, 0x1d,
	0x48, 0x08, 0xf4, 0x05, 0x14, 0x5a, 0x7e, 0x2f, 0x70, 0x09, 0x23, 0x76, 0xa9, 0x30, 0x1b, 0x5e,
	0x8c, 0x80, 0x1e, 0x43, 0xb1, 0x1f, 0xd8, 0xa2, 0x7f, 0x39, 0x3d, 0x52, 0x82, 0xac, 0xc3, 0x1d,
	0x22, 0x6d, 0xfe, 0xfd, 0x42, 0x87, 0x25, 0xca, 0x30, 0xeb, 0x53, 0xe3, 0xf7, 0x39, 0xb8, 0x32,
	0x22, 0x17, 0xe8, 0x39, 0xac, 0xaa, 0x5c, 0x58, 0xdc, 0x4c, 0x12, 0x76, 0x02, 0xfe, 0x8a, 0xd2,
	0xe7, 0x33, 0xa8, 0x01, 0xab, 0x5d, 0x82, 0x39, 0xed, 0xda, 0x0e, 0x71, 0x6d, 0x75, 0x0e, 0xde,
	0x4a, 0x05, 0xac, 0x70, 0xf6, 0x84, 0xf6, 0x4b, 0xae, 0x6c, 0xae, 0x74, 0xe3, 0x01, 0xe5, 0x50,
	0x6d, 0xdf, 0x67, 0x31, 0x54, 0x3e, 0x03, 0xea, 0xa5, 0xd0, 0x96, 0x50, 0xed, 0x78, 0x40, 0xd1,
	0x53, 0xd0, 0x69, 0x14, 0x20, 0x2d, 0x2d, 0x08, 0x94, 0xcd, 0xb1, 0x28, 0xcd, 0x48, 0xd1, 0x1c,
	0x5a, 0x18, 0x5f, 0x2e, 0xc2, 0xc5, 0x93, 0x15, 0x41, 0x0f, 0x01, 0x28, 0xc3, 0x21, 0x23, 0xb6,
	0x85, 0x59, 0x76, 0x8e, 0x0a, 0x52, 0x79, 0x87, 0xa1, 0x07, 0xa0, 0x13, 0xcf, 0x8e, 0xec, 0x72,
	0x59, 0x76, 0xcb, 0x42, 0x75, 0x87, 0xa1, 0x1d, 0xb8, 0xd4, 0xa7, 0x24, 0xb4, 0x12, 0x8b, 0xe6,
	0xb3, 0x8c, 0x57, 0xb9, 0x45, 0x73, 0xb8, 0xf0, 0x33, 0x10, 0x13, 0xd6, 0x70, 0xf5, 0x85, 0x2c,
	0x80, 0x22, 0xd7, 0xaf, 0x4b, 0x0f, 0x52, 0x85, 0x5d, 0x9e, 0xb9, 0xb0, 0xc9, 0x6a, 0x2c, 0x9d,
	0xb5, 0x1a, 0x69, 0x5a, 0xe8, 0x33, 0xd3, 0xc2, 0x86, 0x55, 0x7e, 0x04, 0x79, 0x1d, 0xab, 0x13,
	0xfa, 0xfd, 0x80, 0x96, 0x16, 0x05, 0xd4, 0x67, 0x67, 0xda, 0x9d, 0x15, 0x53, 0x40, 0x7c, 0x2e,
	0x10, 0xea, 0x1e, 0x0b, 0x8f, 0xcd, 0x95, 0x30, 0x31, 0x55, 0x6e, 0xc3, 0xe5, 0x94, 0x0a, 0x5a,
	0x83, 0xfc, 0x21, 0x39, 0x96, 0x37, 0x16, 0xfe, 0x89, 0x9e, 0xc0, 0xe2, 0x00, 0xbb, 0x7d, 0x22,
	0x59, 0x71, 0x7b, 0x6c, 0x3c, 0x49, 0x30, 0x33, 0xb2, 0x79, 0x9c, 0x7b, 0xa8, 0x19, 0xff, 0xc9,
	0xc3, 0xb5, 0x57, 0x0e, 0x65, 0xb1, 0x7b, 0xe7, 0x75, 0xaf, 0x79, 0x06, 0x30, 0xec, 0x25, 0x6a,
	0x47, 0x67, 0x9a, 0xab, 0x66, 0x42, 0x79, 0x2b, 0x52, 0xdd, 0x44, 0x6d, 0xe2, 0xcc, 0x56, 0x24,
	0xdb, 0x09, 0x45, 0x75, 0xb8, 0x78, 0xe2, 0x8a, 0xa2, 0x36, 0x70, 0x16, 0xc2, 0x6a, 0xf2, 0x8e,
	0x42, 0x51, 0x19, 0x74, 0x1c, 0xb6, 0xba, 0xce, 0x80, 0x44, 0x3d, 0x49, 0x37, 0x87, 0x63, 0xb4,
	0x0d, 0x4b, 0xd1, 0xef, 0x3b, 0xd1, 0x67, 0x8a, 0xd5, 0xf7, 0x52, 0xd0, 0x07, 0x42, 0x6c, 0x4a,
	0x35, 0xbe, 0x1b, 0x7b, 0x8e, 0x67, 0x25, 0x8f, 0xe1, 0xe5, 0xcc, 0xdd, 0xd8, 0x73, 0xbc, 0xb7,
	0xc3, 0x93, 0x58, 0x40, 0xe0, 0xa3, 0x13, 0x10, 0x7a, 0x36, 0x04, 0x3e, 0x8a, 0x21, 0x8c, 0x7f,
	0x6a, 0xf0, 0x5e, 0xaa, 0xde, 0xf2, 0x32, 0xf3, 0x03, 0xde, 0xc5, 0x86, 0xd3, 0xf2, 0x16, 0x75,
	0x77, 0x6a, 0x5e, 0x9b, 0x49, 0x6b, 0xf4, 0x14, 0x56, 0x83, 0x90, 0x0c, 0x1c, 0xbf, 0x4f, 0xad,
	0x00, 0x77, 0x14, 0x43, 0xc7, 0xa6, 0x69, 0x45, 0x69, 0x1f, 0xe0, 0x0e, 0x41, 0x0f, 0xa0, 0xe0,
	0x91, 0x23, 0x16, 0x59, 0xe6, 0x27, 0x5b, 0xea, 0x5c, 0x93, 0x5b, 0x19, 0x5f, 0x69, 0x50, 0x8a,
	0x2e, 0xff, 0xe7, 0x4f, 0xe7, 0x53, 0xc9, 0xc9, 0xcd, 0x93, 0x1c, 0xe3, 0x1d, 0xac, 0x8f, 0xf0,
	0x53, 0x96, 0x21, 0x4d, 0x5e, 0x6d, 0x06, 0xf2, 0x8a, 0x64, 0x44, 0x85, 0xff, 0x96, 0x27, 0x63,
	0x03, 0xd6, 0x47, 0xf8, 0x19, 0x25, 0xc3, 0xf8, 0x9d, 0x06, 0x37, 0x9a, 0x24, 0x49, 0xd7, 0x1d,
	0xb9, 0x03, 0xcf, 0x29, 0x94, 0x74, 0xb6, 0xf3, 0xb3, 0x64, 0x7b, 0x13, 0x6e, 0x8e, 0x73, 0x53,
	0x46, 0xf2, 0xa5, 0x06, 0x1f, 0xc4, 0xf2, 0xa6, 0xb8, 0x51, 0xed, 0x76, 0xb1, 0xd7, 0x21, 0xb4,
	0x3e, 0x20, 0x1e, 0x3b, 0xa7, 0x78, 0x9e, 0xc3, 0xb2, 0x1f, 0xa8, 0xb2, 0x68, 0x27, 0x7a, 0x9c,
	0xb2, 0x15, 0xcb, 0xed, 0x61, 0xcf, 0x76, 0x49, 0xb8, 0x1f, 0xe9, 0x9a, 0xca, 0xc8, 0xf8, 0xdb,
	0x02, 0x5c, 0x9f, 0xe4, 0x26, 0xfa, 0x08, 0x16, 0xc5, 0xd3, 0x95, 0x74, 0xed, 0xda, 0x68, 0x78,
	0x33, 0x52, 0x42, 0x2e, 0x2c, 0xb7, 0x22, 0x6b, 0xc9, 0x12, 0x73, 0x6a, 0x96, 0xa4, 0xd7, 0x1e,
	0x23, 0x34, 0xd5, 0x12, 0xe5, 0x5f, 0xe6, 0xe1, 0xda, 0x68, 0x9d, 0xf4, 0xaf, 0x56, 0x6d, 0x86,
	0x5f, 0xad, 0x3f, 0x87, 0x62, 0x3b, 0xf4, 0x7b, 0x56, 0x74, 0x1f, 0x16, 0x09, 0xbe, 0x58, 0xfd,
	0xf1, 0xf9, 0x47, 0x54, 0x89, 0x06, 0x26, 0xf0, 0xd5, 0xa2, 0x6f, 0x34, 0x80, 0x02, 0xf3, 0xd5,
	0xca, 0xf9, 0x6f, 0x7a, 0x65, 0x9d, 0xf9, 0xd1, 0x97, 0xf1, 0x29, 0x2c, 0x49, 0x0f, 0x56, 0xa1,
	0xd0, 0xdc, 0xdd, 0xab, 0xd7, 0xde, 0xbe, 0xaa, 0xd7, 0xd6, 0x2e, 0xa0, 0x4b, 0x50, 0x6c, 0xbc,
	0xb6, 0x0e, 0xcc, 0xfd, 0xcf, 0xcd, 0x7a, 0xb3, 0xb9, 0xa6, 0x71, 0xf9, 0xee, 0xfe, 0x17, 0x07,
	0xaf, 0xea, 0x6f, 0xea, 0xb5, 0xb5, 0x9c, 0xf1, 0x1a, 0xde, 0x9f, 0xe4, 0xc0, 0x4e, 0xeb, 0x10,
	0x7d, 0x08, 0x79, 0xdc, 0x3a, 0x1c, 0x7b, 0x15, 0x56, 0x7a, 0x26, 0xd7, 0x32, 0xee, 0xc2, 0x9d,
	0x0c, 0x3c, 0xb5, 0xd7, 0xaa, 0x5f, 0x03, 0x5c, 0x4e, 0xe8, 0x92, 0x70, 0xe0, 0xb4, 0x08, 0xfa,
	0x83, 0x06, 0x97, 0x4e, 0xf5, 0x3e, 0xf4, 0xbd, 0x8c, 0x14, 0x8e, 0xbe, 0x1b, 0x95, 0xbf, 0x7f,
	0x56, 0x33, 0x79, 0x08, 0x7c, 0xf8, 0x8b, 0x7f, 0x7c, 0xfd, 0xeb, 0xdc, 0x6d, 0x63, 0x53, 0x3c,
	0xdf, 0xc6, 0x0f, 0xbc, 0x89, 0xe7, 0x6a, 0xba, 0xed, 0x3a, 0x94, 0x3d, 0xd6, 0xee, 0xa1, 0x3f,
	0x69, 0x70, 0x39, 0xd5, 0x26, 0xd0, 0xa7, 0x53, 0xbd, 0x98, 0x8d, 0xf0, 0xf9, 0xe1, 0xd9, 0x0d,
	0xa5, 0xd7, 0x1f, 0x0b, 0xaf, 0xef, 0x18, 0xc6, 0x24, 0xaf, 0x5b, 0xc2, 0x5c, 0xf9, 0x9d, 0x3a,
	0xd1, 0x33, 0xfd, 0x1e, 0xd7, 0xab, 0x32, 0xfd, 0x1e, 0xdf, 0x3c, 0xa4, 0xdf, 0xe5, 0x89, 0x7e,
	0x47, 0xb7, 0x29, 0xee, 0xf7, 0x5f, 0x34, 0x40, 0xf2, 0xd8, 0x4e, 0x3a, 0xfe, 0x34, 0xeb, 0x75,
	0x60, 0x52, 0x7b, 0x2a, 0x3f, 0x9b, 0xd1, 0x5a, 0x86, 0x50, 0x11, 0x21, 0x6c, 0x95, 0x3f, 0x98,
	0x14, 0x82, 0xbc, 0x94, 0xf2, 0x18, 0xfe, 0xaa, 0xc1, 0xd5, 0xb7, 0x1e, 0xfe, 0x96, 0x45, 0xf1,
	0x89, 0x88, 0xe2, 0x5e, 0xf9, 0xf6, 0xc4, 0x42, 0x78, 0x89, 0x38, 0xfe, 0xac, 0xc1, 0x95, 0x11,
	0xef, 0x7d, 0xe8, 0xec, 0x8f, 0x7a, 0x43, 0x1e, 0x3d, 0x9e, 0xc5, 0xf4, 0x64, 0x00, 0xc6, 0x84,
	0x00, 0xb6, 0xc5, 0xc3, 0x1e, 0xdd, 0xc6, 0xb6, 0xcd, 0x03, 0xf8, 0x97, 0x06, 0x37, 0x27, 0x3f,
	0x8b, 0xa3, 0xb9, 0xde, 0xbe, 0x87, 0x61, 0xd5, 0xe7, 0x44, 0x91, 0x11, 0x56, 0x45, 0x84, 0x1f,
	0x19, 0x77, 0x26, 0x44, 0xe8, 0x72, 0x8b, 0x78, 0xa3, 0x57, 0xff, 0x9d, 0x4b, 0xb6, 0x5b, 0x71,
	0x0a, 0xab, 0xb3, 0xf6, 0xb7, 0x1a, 0xac, 0xef, 0x7b, 0x63, 0xce, 0x6b, 0xf4, 0x62, 0x8e, 0xc6,
	0xa5, 0xe2, 0x7e, 0x32, 0x07, 0xc6, 0x27, 0x1a, 0xfa, 0x4a, 0x83, 0xeb, 0x63, 0x1d, 0xe4, 0xbd,
	0xe9, 0xf9, 0x1c, 0xf8, 0x3b, 0xad, 0xc3, 0xf2, 0xcb, 0xf9, 0xec, 0x55, 0x61, 0x5e, 0xbc, 0xff,
	0x93, 0x1b, 0x13, 0xff, 0xd3, 0xf9, 0x6e, 0x49, 0xfc, 0xe7, 0xef, 0xbb, 0xff, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0xfb, 0xa0, 0x14, 0xaf, 0x11, 0x1d, 0x00, 0x00,
}
