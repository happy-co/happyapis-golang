// Code generated by protoc-gen-go.
// source: happyco/inspect/template/v1/template.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	happyco/inspect/template/v1/template.proto

It has these top-level messages:
	Template
	ListTemplatesRequest
	ListTemplatesResponse
	CreateTemplatesRequest
	CreateTemplatesResponse
	UpdateTemplatesRequest
	UpdateTemplatesResponse
	SetTemplatesArchivedRequest
	SetTemplatesArchivedResponse
*/
package v1

import proto "github.com/happy-co/happyapis-golang/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import happyco_type_v1 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v11 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v12 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_inspect_type_v1 "github.com/happy-co/happyapis-golang/happyco/inspect/type/v1"
import _ "github.com/happy-co/happyapis-golang/google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Template struct {
	Id           *happyco_type_v1.IntegrationID                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AccountId    *happyco_type_v1.IntegrationID                   `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderId     *happyco_type_v1.IntegrationID                   `protobuf:"bytes,3,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	Name         string                                           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Edition      int32                                            `protobuf:"varint,5,opt,name=edition" json:"edition,omitempty"`
	Description  string                                           `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Sections     map[string]*happyco_inspect_type_v1.Section      `protobuf:"bytes,7,rep,name=sections" json:"sections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Outlines     map[string]*happyco_type_v12.StringArray         `protobuf:"bytes,8,rep,name=outlines" json:"outlines,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RatingGroups map[string]*happyco_inspect_type_v1.RatingGroups `protobuf:"bytes,9,rep,name=rating_groups,json=ratingGroups" json:"rating_groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HeaderFields []*happyco_inspect_type_v1.HeaderField           `protobuf:"bytes,10,rep,name=header_fields,json=headerFields" json:"header_fields,omitempty"`
	FooterFields []*happyco_inspect_type_v1.FooterField           `protobuf:"bytes,11,rep,name=footer_fields,json=footerFields" json:"footer_fields,omitempty"`
}

func (m *Template) Reset()                    { *m = Template{} }
func (m *Template) String() string            { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()               {}
func (*Template) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Template) GetId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Template) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *Template) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *Template) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Template) GetEdition() int32 {
	if m != nil {
		return m.Edition
	}
	return 0
}

func (m *Template) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Template) GetSections() map[string]*happyco_inspect_type_v1.Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Template) GetOutlines() map[string]*happyco_type_v12.StringArray {
	if m != nil {
		return m.Outlines
	}
	return nil
}

func (m *Template) GetRatingGroups() map[string]*happyco_inspect_type_v1.RatingGroups {
	if m != nil {
		return m.RatingGroups
	}
	return nil
}

func (m *Template) GetHeaderFields() []*happyco_inspect_type_v1.HeaderField {
	if m != nil {
		return m.HeaderFields
	}
	return nil
}

func (m *Template) GetFooterFields() []*happyco_inspect_type_v1.FooterField {
	if m != nil {
		return m.FooterFields
	}
	return nil
}

type ListTemplatesRequest struct {
	AccountId   *happyco_type_v1.IntegrationID   `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderIds   []*happyco_type_v1.IntegrationID `protobuf:"bytes,2,rep,name=folder_ids,json=folderIds" json:"folder_ids,omitempty"`
	TemplateIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,3,rep,name=template_ids,json=templateIds" json:"template_ids,omitempty"`
	Archived    bool                             `protobuf:"varint,4,opt,name=archived" json:"archived,omitempty"`
	Paging      *happyco_type_v11.Paging         `protobuf:"bytes,5,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListTemplatesRequest) Reset()                    { *m = ListTemplatesRequest{} }
func (m *ListTemplatesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTemplatesRequest) ProtoMessage()               {}
func (*ListTemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListTemplatesRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *ListTemplatesRequest) GetFolderIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderIds
	}
	return nil
}

func (m *ListTemplatesRequest) GetTemplateIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.TemplateIds
	}
	return nil
}

func (m *ListTemplatesRequest) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *ListTemplatesRequest) GetPaging() *happyco_type_v11.Paging {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListTemplatesResponse struct {
	Templates    []*Template              `protobuf:"bytes,1,rep,name=templates" json:"templates,omitempty"`
	PreviousPage *happyco_type_v11.Paging `protobuf:"bytes,2,opt,name=previous_page,json=previousPage" json:"previous_page,omitempty"`
	NextPage     *happyco_type_v11.Paging `protobuf:"bytes,3,opt,name=next_page,json=nextPage" json:"next_page,omitempty"`
}

func (m *ListTemplatesResponse) Reset()                    { *m = ListTemplatesResponse{} }
func (m *ListTemplatesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTemplatesResponse) ProtoMessage()               {}
func (*ListTemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListTemplatesResponse) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

func (m *ListTemplatesResponse) GetPreviousPage() *happyco_type_v11.Paging {
	if m != nil {
		return m.PreviousPage
	}
	return nil
}

func (m *ListTemplatesResponse) GetNextPage() *happyco_type_v11.Paging {
	if m != nil {
		return m.NextPage
	}
	return nil
}

type CreateTemplatesRequest struct {
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderId  *happyco_type_v1.IntegrationID `protobuf:"bytes,2,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	Templates []*Template                    `protobuf:"bytes,3,rep,name=templates" json:"templates,omitempty"`
}

func (m *CreateTemplatesRequest) Reset()                    { *m = CreateTemplatesRequest{} }
func (m *CreateTemplatesRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplatesRequest) ProtoMessage()               {}
func (*CreateTemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTemplatesRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *CreateTemplatesRequest) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *CreateTemplatesRequest) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

type CreateTemplatesResponse struct {
	TemplateIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,1,rep,name=template_ids,json=templateIds" json:"template_ids,omitempty"`
}

func (m *CreateTemplatesResponse) Reset()                    { *m = CreateTemplatesResponse{} }
func (m *CreateTemplatesResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTemplatesResponse) ProtoMessage()               {}
func (*CreateTemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTemplatesResponse) GetTemplateIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.TemplateIds
	}
	return nil
}

type UpdateTemplatesRequest struct {
	AccountId *happyco_type_v1.IntegrationID `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderId  *happyco_type_v1.IntegrationID `protobuf:"bytes,2,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	Templates []*Template                    `protobuf:"bytes,3,rep,name=templates" json:"templates,omitempty"`
}

func (m *UpdateTemplatesRequest) Reset()                    { *m = UpdateTemplatesRequest{} }
func (m *UpdateTemplatesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplatesRequest) ProtoMessage()               {}
func (*UpdateTemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateTemplatesRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *UpdateTemplatesRequest) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *UpdateTemplatesRequest) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

type UpdateTemplatesResponse struct {
}

func (m *UpdateTemplatesResponse) Reset()                    { *m = UpdateTemplatesResponse{} }
func (m *UpdateTemplatesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplatesResponse) ProtoMessage()               {}
func (*UpdateTemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SetTemplatesArchivedRequest struct {
	AccountId   *happyco_type_v1.IntegrationID   `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FolderId    *happyco_type_v1.IntegrationID   `protobuf:"bytes,2,opt,name=folder_id,json=folderId" json:"folder_id,omitempty"`
	TemplateIds []*happyco_type_v1.IntegrationID `protobuf:"bytes,3,rep,name=template_ids,json=templateIds" json:"template_ids,omitempty"`
}

func (m *SetTemplatesArchivedRequest) Reset()                    { *m = SetTemplatesArchivedRequest{} }
func (m *SetTemplatesArchivedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTemplatesArchivedRequest) ProtoMessage()               {}
func (*SetTemplatesArchivedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetTemplatesArchivedRequest) GetAccountId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *SetTemplatesArchivedRequest) GetFolderId() *happyco_type_v1.IntegrationID {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *SetTemplatesArchivedRequest) GetTemplateIds() []*happyco_type_v1.IntegrationID {
	if m != nil {
		return m.TemplateIds
	}
	return nil
}

type SetTemplatesArchivedResponse struct {
}

func (m *SetTemplatesArchivedResponse) Reset()                    { *m = SetTemplatesArchivedResponse{} }
func (m *SetTemplatesArchivedResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTemplatesArchivedResponse) ProtoMessage()               {}
func (*SetTemplatesArchivedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Template)(nil), "happyco.inspect.template.v1.Template")
	proto.RegisterType((*ListTemplatesRequest)(nil), "happyco.inspect.template.v1.ListTemplatesRequest")
	proto.RegisterType((*ListTemplatesResponse)(nil), "happyco.inspect.template.v1.ListTemplatesResponse")
	proto.RegisterType((*CreateTemplatesRequest)(nil), "happyco.inspect.template.v1.CreateTemplatesRequest")
	proto.RegisterType((*CreateTemplatesResponse)(nil), "happyco.inspect.template.v1.CreateTemplatesResponse")
	proto.RegisterType((*UpdateTemplatesRequest)(nil), "happyco.inspect.template.v1.UpdateTemplatesRequest")
	proto.RegisterType((*UpdateTemplatesResponse)(nil), "happyco.inspect.template.v1.UpdateTemplatesResponse")
	proto.RegisterType((*SetTemplatesArchivedRequest)(nil), "happyco.inspect.template.v1.SetTemplatesArchivedRequest")
	proto.RegisterType((*SetTemplatesArchivedResponse)(nil), "happyco.inspect.template.v1.SetTemplatesArchivedResponse")
}

func init() { proto.RegisterFile("happyco/inspect/template/v1/template.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 919 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xd7, 0x38, 0xdd, 0xdd, 0xe4, 0x65, 0xa3, 0x96, 0x11, 0xb0, 0xc6, 0xbb, 0xac, 0x82, 0xdb,
	0x45, 0xa1, 0x20, 0x47, 0x9b, 0x56, 0x50, 0x5a, 0x7a, 0x58, 0x0a, 0x85, 0x48, 0x48, 0xad, 0x1c,
	0x7a, 0x00, 0x15, 0x45, 0x83, 0x3d, 0x71, 0x46, 0xa4, 0x63, 0xe3, 0x99, 0x58, 0xe4, 0x08, 0x5f,
	0x81, 0x4f, 0x80, 0xc4, 0x85, 0x0f, 0xc0, 0x81, 0x0b, 0x9f, 0x01, 0x89, 0x13, 0x12, 0x47, 0x3e,
	0x08, 0xf2, 0x78, 0x1c, 0xe7, 0xaf, 0x93, 0x14, 0x0e, 0xab, 0xde, 0x3c, 0x79, 0xef, 0xf7, 0x9b,
	0xdf, 0xfc, 0xde, 0x7b, 0x13, 0x1b, 0x6e, 0x0e, 0x49, 0x14, 0x4d, 0xbc, 0xb0, 0xcd, 0xb8, 0x88,
	0xa8, 0x27, 0xdb, 0x92, 0x3e, 0x8b, 0x46, 0x44, 0xd2, 0x76, 0x72, 0x3e, 0x7d, 0x76, 0xa2, 0x38,
	0x94, 0x21, 0x3e, 0xd6, 0xb9, 0x8e, 0xce, 0x75, 0xa6, 0xf1, 0xe4, 0xdc, 0xba, 0x91, 0x13, 0xc9,
	0x49, 0xa4, 0xc0, 0x8c, 0x4b, 0x1a, 0xc4, 0x44, 0xb2, 0x90, 0xf7, 0x99, 0x9f, 0x51, 0x58, 0x27,
	0x8b, 0x59, 0x11, 0x09, 0x18, 0x0f, 0x74, 0xf4, 0x78, 0x31, 0x9a, 0x90, 0x98, 0x11, 0x1d, 0x5c,
	0x56, 0x3a, 0xdd, 0x48, 0xad, 0xfb, 0xe9, 0x3a, 0xdf, 0x26, 0x08, 0xc3, 0x60, 0x44, 0xdb, 0x24,
	0x62, 0x6d, 0xc2, 0x79, 0x28, 0x95, 0x0c, 0x91, 0x45, 0xed, 0xdf, 0x0f, 0xa0, 0xfa, 0xb9, 0x96,
	0x8e, 0x1d, 0x30, 0x98, 0x6f, 0xa2, 0x26, 0x6a, 0xd5, 0x3b, 0xa7, 0x4e, 0x7e, 0x42, 0xc5, 0x95,
	0x9c, 0x3b, 0xdd, 0xe2, 0x10, 0xdd, 0x8f, 0x5c, 0x83, 0xf9, 0xf8, 0x3e, 0x00, 0xf1, 0xbc, 0x70,
	0xcc, 0x65, 0x9f, 0xf9, 0xa6, 0xb1, 0x15, 0xae, 0xa6, 0x11, 0x5d, 0x1f, 0xdf, 0x83, 0xda, 0x20,
	0x1c, 0xf9, 0x34, 0x4e, 0xd1, 0x95, 0xad, 0xd0, 0xd5, 0x0c, 0xd0, 0xf5, 0x31, 0x86, 0x2b, 0x9c,
	0x3c, 0xa3, 0xe6, 0x95, 0x26, 0x6a, 0xd5, 0x5c, 0xf5, 0x8c, 0x4d, 0x38, 0xa0, 0x3e, 0x4b, 0x53,
	0xcd, 0xbd, 0x26, 0x6a, 0xed, 0xb9, 0xf9, 0x12, 0x37, 0xa1, 0xee, 0x53, 0xe1, 0xc5, 0x2c, 0x52,
	0xd1, 0x7d, 0x05, 0x9a, 0xfd, 0x09, 0x3f, 0x82, 0xaa, 0xa0, 0x9e, 0xb2, 0xc6, 0x3c, 0x68, 0x56,
	0x5a, 0xf5, 0xce, 0x2d, 0xa7, 0xa4, 0xc6, 0x4e, 0x6e, 0x9a, 0xd3, 0xd3, 0xa8, 0x8f, 0xb9, 0x8c,
	0x27, 0xee, 0x94, 0x24, 0x25, 0x0c, 0xc7, 0x72, 0xc4, 0x38, 0x15, 0x66, 0x75, 0x17, 0xc2, 0x47,
	0x1a, 0xa5, 0x09, 0x73, 0x12, 0xfc, 0x14, 0x1a, 0xa9, 0x0f, 0x3c, 0xe8, 0x07, 0x71, 0x38, 0x8e,
	0x84, 0x59, 0x53, 0xac, 0xef, 0x6d, 0xc7, 0xea, 0x2a, 0xe8, 0x27, 0x0a, 0x99, 0x31, 0x1f, 0xc6,
	0x33, 0x3f, 0xe1, 0x2e, 0x34, 0x86, 0x94, 0xa4, 0xc5, 0x18, 0x30, 0x3a, 0xf2, 0x85, 0x09, 0x8a,
	0xfd, 0xc6, 0x32, 0xbb, 0x2e, 0xcc, 0xa7, 0x2a, 0xfb, 0x61, 0x9a, 0xec, 0x1e, 0x0e, 0x8b, 0x85,
	0xa2, 0x1a, 0x84, 0xa1, 0x2c, 0xa8, 0xea, 0x1b, 0xa8, 0x1e, 0xaa, 0x6c, 0x4d, 0x35, 0x28, 0x16,
	0xc2, 0xfa, 0x0a, 0x1a, 0x73, 0xfe, 0xe2, 0x6b, 0x50, 0xf9, 0x86, 0x4e, 0x54, 0x8f, 0xd6, 0xdc,
	0xf4, 0x11, 0xbf, 0x0b, 0x7b, 0x09, 0x19, 0x8d, 0xa9, 0xee, 0xbf, 0xe6, 0xda, 0x5d, 0x34, 0x91,
	0x9b, 0xa5, 0xdf, 0x35, 0xee, 0x20, 0xeb, 0x0b, 0x68, 0xcc, 0xb9, 0xbd, 0x82, 0xbe, 0x33, 0x4f,
	0x7f, 0xb2, 0xd4, 0xa0, 0x3d, 0x19, 0x33, 0x1e, 0x5c, 0xc4, 0x31, 0x99, 0xcc, 0x52, 0x0f, 0xe0,
	0xa5, 0x25, 0xcb, 0x57, 0xd0, 0xdf, 0x9b, 0xa7, 0x3f, 0x5b, 0xab, 0x7e, 0x96, 0x6c, 0x66, 0x1f,
	0xfb, 0x67, 0x03, 0x5e, 0xfe, 0x8c, 0x09, 0x99, 0x17, 0x5a, 0xb8, 0xf4, 0xdb, 0x31, 0x15, 0x72,
	0x61, 0x38, 0xd1, 0xae, 0xc3, 0x79, 0x1f, 0x60, 0x3a, 0x9c, 0xc2, 0x34, 0x54, 0x05, 0x37, 0xc2,
	0xf3, 0xe9, 0x14, 0xf8, 0x02, 0x0e, 0xf3, 0x36, 0x54, 0x04, 0x95, 0xad, 0x08, 0xea, 0x39, 0x26,
	0xa5, 0xb0, 0xa0, 0x4a, 0x62, 0x6f, 0xc8, 0x12, 0xea, 0xab, 0x29, 0xaf, 0xba, 0xd3, 0x35, 0x6e,
	0xc3, 0x7e, 0x76, 0x5b, 0xaa, 0x41, 0xaf, 0x77, 0x8e, 0x96, 0x88, 0x1f, 0xab, 0xb0, 0xab, 0xd3,
	0xec, 0x3f, 0x10, 0xbc, 0xb2, 0x60, 0x93, 0x88, 0x42, 0x2e, 0x28, 0x7e, 0x00, 0xb5, 0x7c, 0x57,
	0x61, 0x22, 0x25, 0xf3, 0x6c, 0xab, 0x91, 0x72, 0x0b, 0x1c, 0xfe, 0x00, 0x1a, 0x51, 0x4c, 0x13,
	0x16, 0x8e, 0x45, 0x3f, 0x22, 0x41, 0x5e, 0xce, 0xb5, 0xb2, 0x0e, 0xf3, 0xec, 0xc7, 0x24, 0xa0,
	0xf8, 0x36, 0xd4, 0x38, 0xfd, 0x4e, 0x66, 0xc8, 0x4a, 0x39, 0xb2, 0x9a, 0x66, 0xa6, 0x28, 0xfb,
	0x2f, 0x04, 0xaf, 0x3e, 0x88, 0x29, 0x91, 0xf4, 0xff, 0xae, 0xfd, 0xdc, 0xc5, 0x6c, 0xec, 0x78,
	0x31, 0xcf, 0xf9, 0x59, 0x79, 0x3e, 0x3f, 0xed, 0xa7, 0x70, 0xb4, 0x74, 0x34, 0x5d, 0xaf, 0xc5,
	0xce, 0x42, 0x3b, 0x77, 0x96, 0x72, 0xee, 0x49, 0xe4, 0xbf, 0x90, 0xce, 0xbd, 0x06, 0x47, 0x4b,
	0x47, 0xcb, 0x9c, 0xb3, 0xff, 0x46, 0x70, 0xdc, 0xa3, 0xc5, 0x08, 0x5c, 0xe8, 0x69, 0xba, 0x0c,
	0x67, 0xff, 0xef, 0xf7, 0x85, 0x7d, 0x0a, 0x27, 0xab, 0x4f, 0x97, 0x1d, 0xbf, 0xf3, 0xfd, 0x01,
	0x5c, 0xcd, 0xa3, 0x3d, 0x1a, 0x27, 0xcc, 0xa3, 0xf8, 0x27, 0x04, 0x8d, 0xb9, 0x6b, 0x01, 0x9f,
	0x97, 0x3a, 0xbe, 0xea, 0xa6, 0xb5, 0x3a, 0xbb, 0x40, 0x74, 0x2d, 0xde, 0xfa, 0xe1, 0xcf, 0x7f,
	0x7e, 0x34, 0xae, 0xdb, 0xa7, 0xea, 0xbd, 0xac, 0x78, 0x73, 0x9b, 0xbe, 0x67, 0x8a, 0xf6, 0x88,
	0x09, 0x79, 0x17, 0xdd, 0xc4, 0xbf, 0x20, 0xb8, 0xba, 0x30, 0x0c, 0xb8, 0xfc, 0x55, 0x62, 0xf5,
	0xad, 0x60, 0xdd, 0xde, 0x0d, 0xa4, 0x95, 0xbe, 0xad, 0x94, 0x9e, 0xd9, 0xcd, 0xf5, 0x4a, 0x3d,
	0x05, 0xcd, 0xb5, 0x2e, 0xb4, 0xdf, 0x06, 0xad, 0xab, 0xe7, 0x70, 0x83, 0xd6, 0x75, 0x1d, 0xae,
	0xb5, 0x5a, 0x25, 0x5a, 0xc7, 0x0a, 0x9a, 0x6a, 0xfd, 0x15, 0xc1, 0x35, 0xdd, 0x24, 0x85, 0xd8,
	0x3b, 0xa5, 0xfb, 0x96, 0x4c, 0x8f, 0xf5, 0xfe, 0x73, 0x20, 0xb5, 0xec, 0x77, 0x94, 0xec, 0x37,
	0xad, 0x37, 0xd6, 0xcb, 0xd6, 0xff, 0x7c, 0xa9, 0xee, 0xdf, 0x10, 0xe0, 0x27, 0x9c, 0x5c, 0x0a,
	0xe5, 0x8e, 0x52, 0xde, 0xb2, 0xae, 0x97, 0x18, 0xce, 0x0b, 0xed, 0x1f, 0xbe, 0xfe, 0xe5, 0x71,
	0xc9, 0x47, 0xd6, 0xd7, 0xfb, 0xea, 0xa3, 0xe4, 0xd6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x8e, 0x38, 0xb5, 0x8a, 0x0d, 0x00, 0x00,
}
