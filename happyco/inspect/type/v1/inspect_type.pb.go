// Code generated by protoc-gen-go.
// source: happyco/inspect/type/v1/inspect_type.proto
// DO NOT EDIT!

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	happyco/inspect/type/v1/inspect_type.proto

It has these top-level messages:
	HeaderField
	Section
	Item
	Photo
	FooterField
	RatingGroups
	RatingControl
	RatingCheckbox
	RatingRadioGroup
	RatingRadioGroupOption
	RatingDropDown
	RatingDropDownOption
	RatingValues
*/
package v1

import proto "github.com/happy-co/happyapis-golang/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import happyco_type_v1 "github.com/happy-co/happyapis-golang/happyco/type/v1"
import happyco_type_v11 "github.com/happy-co/happyapis-golang/happyco/type/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RatingImage int32

const (
	RatingImage_UNDEFINED            RatingImage = 0
	RatingImage_STAR_FULL            RatingImage = 1
	RatingImage_STAR_HALF            RatingImage = 2
	RatingImage_STAR_EMPTY           RatingImage = 3
	RatingImage_TICK_ROUND           RatingImage = 4
	RatingImage_CLEAN                RatingImage = 5
	RatingImage_SCRATCHES            RatingImage = 6
	RatingImage_SPLAT                RatingImage = 7
	RatingImage_BROKEN               RatingImage = 8
	RatingImage_TICK                 RatingImage = 9
	RatingImage_CROSS                RatingImage = 10
	RatingImage_A                    RatingImage = 11
	RatingImage_B                    RatingImage = 12
	RatingImage_C                    RatingImage = 13
	RatingImage_D                    RatingImage = 14
	RatingImage_E                    RatingImage = 15
	RatingImage_F                    RatingImage = 16
	RatingImage_G                    RatingImage = 17
	RatingImage_H                    RatingImage = 18
	RatingImage_I                    RatingImage = 19
	RatingImage_J                    RatingImage = 20
	RatingImage_K                    RatingImage = 21
	RatingImage_L                    RatingImage = 22
	RatingImage_M                    RatingImage = 23
	RatingImage_N                    RatingImage = 24
	RatingImage_O                    RatingImage = 25
	RatingImage_P                    RatingImage = 26
	RatingImage_Q                    RatingImage = 27
	RatingImage_R                    RatingImage = 28
	RatingImage_S                    RatingImage = 29
	RatingImage_T                    RatingImage = 30
	RatingImage_U                    RatingImage = 31
	RatingImage_V                    RatingImage = 32
	RatingImage_W                    RatingImage = 33
	RatingImage_X                    RatingImage = 34
	RatingImage_Y                    RatingImage = 35
	RatingImage_Z                    RatingImage = 36
	RatingImage_DIGIT_0              RatingImage = 37
	RatingImage_DIGIT_1              RatingImage = 38
	RatingImage_DIGIT_2              RatingImage = 39
	RatingImage_DIGIT_3              RatingImage = 40
	RatingImage_DIGIT_4              RatingImage = 41
	RatingImage_DIGIT_5              RatingImage = 42
	RatingImage_DIGIT_6              RatingImage = 43
	RatingImage_DIGIT_7              RatingImage = 44
	RatingImage_DIGIT_8              RatingImage = 45
	RatingImage_DIGIT_9              RatingImage = 46
	RatingImage_EXCLAMATION          RatingImage = 47
	RatingImage_QUESTION             RatingImage = 48
	RatingImage_EXCLAMATION_QUESTION RatingImage = 49
	RatingImage_DOUBLE_EXCLAMATION   RatingImage = 50
	RatingImage_DOLLAR               RatingImage = 51
	RatingImage_POUND                RatingImage = 52
	RatingImage_CENTS                RatingImage = 53
	RatingImage_THUMBS_UP            RatingImage = 54
	RatingImage_THUMBS_DOWN          RatingImage = 55
	RatingImage_AWARD                RatingImage = 56
	RatingImage_FEMALE               RatingImage = 57
	RatingImage_MALE                 RatingImage = 58
	RatingImage_CALENDAR             RatingImage = 59
	RatingImage_BUILDINGS            RatingImage = 60
	RatingImage_BUILDING             RatingImage = 61
	RatingImage_HOUSE                RatingImage = 62
	RatingImage_NO_ENTRY             RatingImage = 63
	RatingImage_DOG                  RatingImage = 64
	RatingImage_CAT                  RatingImage = 65
	RatingImage_RAT                  RatingImage = 66
	RatingImage_CIGARETTE            RatingImage = 67
	RatingImage_NO_SMOKING           RatingImage = 68
	RatingImage_POOP                 RatingImage = 69
	RatingImage_WEED                 RatingImage = 70
	RatingImage_GUN                  RatingImage = 71
	RatingImage_BROKEN_GLASS         RatingImage = 72
	RatingImage_CRACKED              RatingImage = 73
	RatingImage_DEAD_FACE            RatingImage = 74
	RatingImage_HANDICAP             RatingImage = 75
	RatingImage_BROKEN_HEART         RatingImage = 76
	RatingImage_HEART                RatingImage = 77
	RatingImage_SYRINGE              RatingImage = 78
	RatingImage_CLOCK                RatingImage = 79
	RatingImage_MUSIC_NOTE           RatingImage = 80
	RatingImage_PLANT                RatingImage = 81
	RatingImage_NOSE                 RatingImage = 82
	RatingImage_DROPLET              RatingImage = 83
	RatingImage_ELECTRIC             RatingImage = 84
	RatingImage_BUG                  RatingImage = 85
	RatingImage_ARROW_RIGHT          RatingImage = 86
	RatingImage_ARROW_LEFT           RatingImage = 87
	RatingImage_ARROW_UP             RatingImage = 88
	RatingImage_ARROW_DOWN           RatingImage = 89
	RatingImage_RECYCLE              RatingImage = 90
	RatingImage_TRASH                RatingImage = 91
	RatingImage_KEY                  RatingImage = 92
	RatingImage_LOCK                 RatingImage = 93
	RatingImage_UNLOCK               RatingImage = 94
	RatingImage_CLOUD                RatingImage = 95
	RatingImage_SUNSHINE             RatingImage = 96
	RatingImage_PLUS                 RatingImage = 97
	RatingImage_MINUS                RatingImage = 98
	RatingImage_TEXTFIELD            RatingImage = 99
	RatingImage_METER                RatingImage = 100
	RatingImage_CAR                  RatingImage = 101
	RatingImage_CHART                RatingImage = 102
	RatingImage_WRENCH               RatingImage = 103
	RatingImage_CALCULATOR           RatingImage = 104
	RatingImage_CREDIT_CARD          RatingImage = 105
	RatingImage_PAINTBRUSH           RatingImage = 106
	RatingImage_ROLLER               RatingImage = 107
	RatingImage_MOBILE               RatingImage = 108
	RatingImage_FLAG                 RatingImage = 109
	RatingImage_DOOR_OPEN            RatingImage = 110
	RatingImage_DOOR_SHUT            RatingImage = 111
	RatingImage_BED                  RatingImage = 112
	RatingImage_SHOWER               RatingImage = 113
	RatingImage_SMOKE_ALARM          RatingImage = 114
	RatingImage_LIGHT_BULB           RatingImage = 115
	RatingImage_SMILEY_HAPPY         RatingImage = 116
	RatingImage_SMILEY_SAD           RatingImage = 117
)

var RatingImage_name = map[int32]string{
	0:   "UNDEFINED",
	1:   "STAR_FULL",
	2:   "STAR_HALF",
	3:   "STAR_EMPTY",
	4:   "TICK_ROUND",
	5:   "CLEAN",
	6:   "SCRATCHES",
	7:   "SPLAT",
	8:   "BROKEN",
	9:   "TICK",
	10:  "CROSS",
	11:  "A",
	12:  "B",
	13:  "C",
	14:  "D",
	15:  "E",
	16:  "F",
	17:  "G",
	18:  "H",
	19:  "I",
	20:  "J",
	21:  "K",
	22:  "L",
	23:  "M",
	24:  "N",
	25:  "O",
	26:  "P",
	27:  "Q",
	28:  "R",
	29:  "S",
	30:  "T",
	31:  "U",
	32:  "V",
	33:  "W",
	34:  "X",
	35:  "Y",
	36:  "Z",
	37:  "DIGIT_0",
	38:  "DIGIT_1",
	39:  "DIGIT_2",
	40:  "DIGIT_3",
	41:  "DIGIT_4",
	42:  "DIGIT_5",
	43:  "DIGIT_6",
	44:  "DIGIT_7",
	45:  "DIGIT_8",
	46:  "DIGIT_9",
	47:  "EXCLAMATION",
	48:  "QUESTION",
	49:  "EXCLAMATION_QUESTION",
	50:  "DOUBLE_EXCLAMATION",
	51:  "DOLLAR",
	52:  "POUND",
	53:  "CENTS",
	54:  "THUMBS_UP",
	55:  "THUMBS_DOWN",
	56:  "AWARD",
	57:  "FEMALE",
	58:  "MALE",
	59:  "CALENDAR",
	60:  "BUILDINGS",
	61:  "BUILDING",
	62:  "HOUSE",
	63:  "NO_ENTRY",
	64:  "DOG",
	65:  "CAT",
	66:  "RAT",
	67:  "CIGARETTE",
	68:  "NO_SMOKING",
	69:  "POOP",
	70:  "WEED",
	71:  "GUN",
	72:  "BROKEN_GLASS",
	73:  "CRACKED",
	74:  "DEAD_FACE",
	75:  "HANDICAP",
	76:  "BROKEN_HEART",
	77:  "HEART",
	78:  "SYRINGE",
	79:  "CLOCK",
	80:  "MUSIC_NOTE",
	81:  "PLANT",
	82:  "NOSE",
	83:  "DROPLET",
	84:  "ELECTRIC",
	85:  "BUG",
	86:  "ARROW_RIGHT",
	87:  "ARROW_LEFT",
	88:  "ARROW_UP",
	89:  "ARROW_DOWN",
	90:  "RECYCLE",
	91:  "TRASH",
	92:  "KEY",
	93:  "LOCK",
	94:  "UNLOCK",
	95:  "CLOUD",
	96:  "SUNSHINE",
	97:  "PLUS",
	98:  "MINUS",
	99:  "TEXTFIELD",
	100: "METER",
	101: "CAR",
	102: "CHART",
	103: "WRENCH",
	104: "CALCULATOR",
	105: "CREDIT_CARD",
	106: "PAINTBRUSH",
	107: "ROLLER",
	108: "MOBILE",
	109: "FLAG",
	110: "DOOR_OPEN",
	111: "DOOR_SHUT",
	112: "BED",
	113: "SHOWER",
	114: "SMOKE_ALARM",
	115: "LIGHT_BULB",
	116: "SMILEY_HAPPY",
	117: "SMILEY_SAD",
}
var RatingImage_value = map[string]int32{
	"UNDEFINED":            0,
	"STAR_FULL":            1,
	"STAR_HALF":            2,
	"STAR_EMPTY":           3,
	"TICK_ROUND":           4,
	"CLEAN":                5,
	"SCRATCHES":            6,
	"SPLAT":                7,
	"BROKEN":               8,
	"TICK":                 9,
	"CROSS":                10,
	"A":                    11,
	"B":                    12,
	"C":                    13,
	"D":                    14,
	"E":                    15,
	"F":                    16,
	"G":                    17,
	"H":                    18,
	"I":                    19,
	"J":                    20,
	"K":                    21,
	"L":                    22,
	"M":                    23,
	"N":                    24,
	"O":                    25,
	"P":                    26,
	"Q":                    27,
	"R":                    28,
	"S":                    29,
	"T":                    30,
	"U":                    31,
	"V":                    32,
	"W":                    33,
	"X":                    34,
	"Y":                    35,
	"Z":                    36,
	"DIGIT_0":              37,
	"DIGIT_1":              38,
	"DIGIT_2":              39,
	"DIGIT_3":              40,
	"DIGIT_4":              41,
	"DIGIT_5":              42,
	"DIGIT_6":              43,
	"DIGIT_7":              44,
	"DIGIT_8":              45,
	"DIGIT_9":              46,
	"EXCLAMATION":          47,
	"QUESTION":             48,
	"EXCLAMATION_QUESTION": 49,
	"DOUBLE_EXCLAMATION":   50,
	"DOLLAR":               51,
	"POUND":                52,
	"CENTS":                53,
	"THUMBS_UP":            54,
	"THUMBS_DOWN":          55,
	"AWARD":                56,
	"FEMALE":               57,
	"MALE":                 58,
	"CALENDAR":             59,
	"BUILDINGS":            60,
	"BUILDING":             61,
	"HOUSE":                62,
	"NO_ENTRY":             63,
	"DOG":                  64,
	"CAT":                  65,
	"RAT":                  66,
	"CIGARETTE":            67,
	"NO_SMOKING":           68,
	"POOP":                 69,
	"WEED":                 70,
	"GUN":                  71,
	"BROKEN_GLASS":         72,
	"CRACKED":              73,
	"DEAD_FACE":            74,
	"HANDICAP":             75,
	"BROKEN_HEART":         76,
	"HEART":                77,
	"SYRINGE":              78,
	"CLOCK":                79,
	"MUSIC_NOTE":           80,
	"PLANT":                81,
	"NOSE":                 82,
	"DROPLET":              83,
	"ELECTRIC":             84,
	"BUG":                  85,
	"ARROW_RIGHT":          86,
	"ARROW_LEFT":           87,
	"ARROW_UP":             88,
	"ARROW_DOWN":           89,
	"RECYCLE":              90,
	"TRASH":                91,
	"KEY":                  92,
	"LOCK":                 93,
	"UNLOCK":               94,
	"CLOUD":                95,
	"SUNSHINE":             96,
	"PLUS":                 97,
	"MINUS":                98,
	"TEXTFIELD":            99,
	"METER":                100,
	"CAR":                  101,
	"CHART":                102,
	"WRENCH":               103,
	"CALCULATOR":           104,
	"CREDIT_CARD":          105,
	"PAINTBRUSH":           106,
	"ROLLER":               107,
	"MOBILE":               108,
	"FLAG":                 109,
	"DOOR_OPEN":            110,
	"DOOR_SHUT":            111,
	"BED":                  112,
	"SHOWER":               113,
	"SMOKE_ALARM":          114,
	"LIGHT_BULB":           115,
	"SMILEY_HAPPY":         116,
	"SMILEY_SAD":           117,
}

func (x RatingImage) String() string {
	return proto.EnumName(RatingImage_name, int32(x))
}
func (RatingImage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// * Header fields exist at the top of inspections and reports generated from
// them. They can be preset in scheduled inspections.
type HeaderField struct {
	// * Label is required and is shown on both the inspection and reports.
	// Example values include: File #, Key Number, etc.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// * Type is required an must be set to 'text'.
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// Value is optional and is shown on both the inspection and reports.
	// It can be changed during the inspection.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *HeaderField) Reset()                    { *m = HeaderField{} }
func (m *HeaderField) String() string            { return proto.CompactTextString(m) }
func (*HeaderField) ProtoMessage()               {}
func (*HeaderField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HeaderField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *HeaderField) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HeaderField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// * Sections provide structure to the inspection. Typically they'll have names
// like 'Kitchen', 'Floor 1', etc.
type Section struct {
	// * Section name is an optional field but should be set to something
	// that gives context to its items. The section name will be shown as a
	// header to the item names in inspections and reports.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// * Items contain most of the inspection information such as; selected
	// rating values, notes and photos.
	Items []*Item `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *Section) Reset()                    { *m = Section{} }
func (m *Section) String() string            { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()               {}
func (*Section) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Section) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Section) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// * Item contains most of the inspection information such as; selected rating
// values, notes and photos. The name of an item should make sense in context
// of the section which they are a child of. An item corresponds to an
// individual inspection row within the inspection.
type Item struct {
	// * Name is an optional field but should be set to something that makes
	// sense in context of the parent section. For example; 'Kitchen':
	// 'Sink', 'Floor 1': 'Water Heater'.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// * Notes is an optional field where inspectors can type custom notes
	// (optionally using SnapText) that pertain to this item.
	Notes string `protobuf:"bytes,2,opt,name=notes" json:"notes,omitempty"`
	// * Info is an optional field that can be used to provide helpful
	// information to the inspector. It is not shown on the report and is
	// primarily used to help training.
	Info string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	// * Photos data can be added with the AddInspectionPhotos api.
	Photos []*Photo `protobuf:"bytes,8,rep,name=photos" json:"photos,omitempty"`
	// * Rating group key is a string that can be used to access a rating
	// group from the parent inspection. A rating group must exist for this
	// key within the inspection for the value to be valid.
	RatingGroupKey string `protobuf:"bytes,5,opt,name=rating_group_key,json=ratingGroupKey" json:"rating_group_key,omitempty"`
	// * Values are a map of rating keys and the selected value(s). That can
	// be referenced using the item's associated rating group.
	Values map[string]*RatingValues `protobuf:"bytes,6,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// * Scores are a map of rating keys and the selected score(s). That can
	// be referenced using the item's associated rating group.
	Scores map[string]*happyco_type_v1.FloatArray `protobuf:"bytes,7,rep,name=scores" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Item) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Item) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

func (m *Item) GetRatingGroupKey() string {
	if m != nil {
		return m.RatingGroupKey
	}
	return ""
}

func (m *Item) GetValues() map[string]*RatingValues {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Item) GetScores() map[string]*happyco_type_v1.FloatArray {
	if m != nil {
		return m.Scores
	}
	return nil
}

type Photo struct {
	Id  *happyco_type_v11.IntegrationID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url string                          `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Photo) GetId() *happyco_type_v11.IntegrationID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Photo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// * Header fields exist at the end of inspections and reports generated from
// them. They can be preset in scheduled inspections.
type FooterField struct {
	// * Label is required and is shown on both the inspection and reports.
	// Example values include: File #, Key Number, etc.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// * Type is required an must be set to 'text'.
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// * Value is optional and is shown on both the inspection and reports.
	// It can be changed during the inspection.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *FooterField) Reset()                    { *m = FooterField{} }
func (m *FooterField) String() string            { return proto.CompactTextString(m) }
func (*FooterField) ProtoMessage()               {}
func (*FooterField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FooterField) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *FooterField) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FooterField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// * Rating groups have an optional label that can be useful for selecting a
// rating group during the item insert or update process. A rating group is
// what makes up the form controls for each item row in an inspection.
type RatingGroups struct {
	// * Label is an optional field that can help users that need to update
	// inspections on the fly.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// * Ratings are the ordered set of rating controls an inspector sees
	// for an item that references this rating group.
	Ratings []*RatingControl `protobuf:"bytes,2,rep,name=ratings" json:"ratings,omitempty"`
}

func (m *RatingGroups) Reset()                    { *m = RatingGroups{} }
func (m *RatingGroups) String() string            { return proto.CompactTextString(m) }
func (*RatingGroups) ProtoMessage()               {}
func (*RatingGroups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RatingGroups) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RatingGroups) GetRatings() []*RatingControl {
	if m != nil {
		return m.Ratings
	}
	return nil
}

// Rating control describe a single control that a user can use to rate an item. There
// are currently 3 controls; a checkbox, radio group, and drop down. The
type RatingControl struct {
	// * Key is a required field. It is used when a control has a selected
	// value. The key and its selected value(s) will be inserted into an
	// item's values map field and the key and the selected score(s) will
	// be inserted into the item's scores map field. It is also the default
	// string displayed to the user unless custom label(s) are set (see each control type).
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// * Control type is a required field and must be one of checkbox,
	// radio_group, or drop_down.
	//
	// Types that are valid to be assigned to ControlType:
	//	*RatingControl_Checkbox
	//	*RatingControl_RadioGroup
	//	*RatingControl_DropDown
	ControlType isRatingControl_ControlType `protobuf_oneof:"control_type"`
}

func (m *RatingControl) Reset()                    { *m = RatingControl{} }
func (m *RatingControl) String() string            { return proto.CompactTextString(m) }
func (*RatingControl) ProtoMessage()               {}
func (*RatingControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isRatingControl_ControlType interface {
	isRatingControl_ControlType()
}

type RatingControl_Checkbox struct {
	Checkbox *RatingCheckbox `protobuf:"bytes,2,opt,name=checkbox,oneof"`
}
type RatingControl_RadioGroup struct {
	RadioGroup *RatingRadioGroup `protobuf:"bytes,3,opt,name=radio_group,json=radioGroup,oneof"`
}
type RatingControl_DropDown struct {
	DropDown *RatingDropDown `protobuf:"bytes,4,opt,name=drop_down,json=dropDown,oneof"`
}

func (*RatingControl_Checkbox) isRatingControl_ControlType()   {}
func (*RatingControl_RadioGroup) isRatingControl_ControlType() {}
func (*RatingControl_DropDown) isRatingControl_ControlType()   {}

func (m *RatingControl) GetControlType() isRatingControl_ControlType {
	if m != nil {
		return m.ControlType
	}
	return nil
}

func (m *RatingControl) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RatingControl) GetCheckbox() *RatingCheckbox {
	if x, ok := m.GetControlType().(*RatingControl_Checkbox); ok {
		return x.Checkbox
	}
	return nil
}

func (m *RatingControl) GetRadioGroup() *RatingRadioGroup {
	if x, ok := m.GetControlType().(*RatingControl_RadioGroup); ok {
		return x.RadioGroup
	}
	return nil
}

func (m *RatingControl) GetDropDown() *RatingDropDown {
	if x, ok := m.GetControlType().(*RatingControl_DropDown); ok {
		return x.DropDown
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RatingControl) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RatingControl_OneofMarshaler, _RatingControl_OneofUnmarshaler, _RatingControl_OneofSizer, []interface{}{
		(*RatingControl_Checkbox)(nil),
		(*RatingControl_RadioGroup)(nil),
		(*RatingControl_DropDown)(nil),
	}
}

func _RatingControl_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RatingControl)
	// control_type
	switch x := m.ControlType.(type) {
	case *RatingControl_Checkbox:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkbox); err != nil {
			return err
		}
	case *RatingControl_RadioGroup:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RadioGroup); err != nil {
			return err
		}
	case *RatingControl_DropDown:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropDown); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RatingControl.ControlType has unexpected type %T", x)
	}
	return nil
}

func _RatingControl_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RatingControl)
	switch tag {
	case 2: // control_type.checkbox
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RatingCheckbox)
		err := b.DecodeMessage(msg)
		m.ControlType = &RatingControl_Checkbox{msg}
		return true, err
	case 3: // control_type.radio_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RatingRadioGroup)
		err := b.DecodeMessage(msg)
		m.ControlType = &RatingControl_RadioGroup{msg}
		return true, err
	case 4: // control_type.drop_down
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RatingDropDown)
		err := b.DecodeMessage(msg)
		m.ControlType = &RatingControl_DropDown{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RatingControl_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RatingControl)
	// control_type
	switch x := m.ControlType.(type) {
	case *RatingControl_Checkbox:
		s := proto.Size(x.Checkbox)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RatingControl_RadioGroup:
		s := proto.Size(x.RadioGroup)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RatingControl_DropDown:
		s := proto.Size(x.DropDown)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// * Rating checkbox is the simplest control and can simply be toggled. When
// toggled on the value and score will be set on the item with the rating
// controls key; when off no entries will be added to the item.
type RatingCheckbox struct {
	// * Label is an optional field that will override key as the user to be
	// displayed. This is useful for localization of inspections.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// * Value is a required field that will be inserted into the item and
	// shown on reports if the checkbox is toggled on.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// * Score is an optional field that will be inserted into the item and
	// can be shown on reports if the checkbox is toggled on.
	Score float32     `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Color string      `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Image RatingImage `protobuf:"varint,5,opt,name=image,enum=happyco.inspect.type.v1.RatingImage" json:"image,omitempty"`
}

func (m *RatingCheckbox) Reset()                    { *m = RatingCheckbox{} }
func (m *RatingCheckbox) String() string            { return proto.CompactTextString(m) }
func (*RatingCheckbox) ProtoMessage()               {}
func (*RatingCheckbox) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RatingCheckbox) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RatingCheckbox) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RatingCheckbox) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingCheckbox) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RatingCheckbox) GetImage() RatingImage {
	if m != nil {
		return m.Image
	}
	return RatingImage_UNDEFINED
}

// * Rating radio group are mutually exclusive controls. They can have none or
// one option selected.
type RatingRadioGroup struct {
	// * Label is an optional field that will override key as the user to be
	// displayed. This is useful for localization of inspections.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// Options is a required field that muast have 2-6 elements that
	// represent the possible mutually exclusive selections
	Options []*RatingRadioGroupOption `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
}

func (m *RatingRadioGroup) Reset()                    { *m = RatingRadioGroup{} }
func (m *RatingRadioGroup) String() string            { return proto.CompactTextString(m) }
func (*RatingRadioGroup) ProtoMessage()               {}
func (*RatingRadioGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RatingRadioGroup) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RatingRadioGroup) GetOptions() []*RatingRadioGroupOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// * Rating radio group option represent one of the toggles in a radio group.
type RatingRadioGroupOption struct {
	// * Value is a required field that will be inserted into the item and
	// shown on reports if this radio option is selected. No two options in
	// the same radio group can have the same value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// * Score is an optional field that will be inserted into the item and
	// can be shown on reports if this radio option is selected.
	Score float32     `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Color string      `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Image RatingImage `protobuf:"varint,5,opt,name=image,enum=happyco.inspect.type.v1.RatingImage" json:"image,omitempty"`
}

func (m *RatingRadioGroupOption) Reset()                    { *m = RatingRadioGroupOption{} }
func (m *RatingRadioGroupOption) String() string            { return proto.CompactTextString(m) }
func (*RatingRadioGroupOption) ProtoMessage()               {}
func (*RatingRadioGroupOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RatingRadioGroupOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RatingRadioGroupOption) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingRadioGroupOption) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RatingRadioGroupOption) GetImage() RatingImage {
	if m != nil {
		return m.Image
	}
	return RatingImage_UNDEFINED
}

// * Rating drop downs are currently mutually exclusive controls. They can have
// none or one option selected. They differ from radio controls in that each
// option can have its own label.
type RatingDropDown struct {
	// * Label is an optional field that will override key as the user to be
	// displayed. This is useful for localization of inspections.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// Options is a required field that muast have 2-16 elements that
	// represent the possible mutually exclusive selections
	Options []*RatingDropDownOption `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
}

func (m *RatingDropDown) Reset()                    { *m = RatingDropDown{} }
func (m *RatingDropDown) String() string            { return proto.CompactTextString(m) }
func (*RatingDropDown) ProtoMessage()               {}
func (*RatingDropDown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RatingDropDown) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RatingDropDown) GetOptions() []*RatingDropDownOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// * Rating drop down options represent one of the selectable options in a drop
// down.
type RatingDropDownOption struct {
	// * Label is an optional field that will override the value as the
	// defaul option to be displayed to the user for this option. This is
	// useful for localization of inspections.
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// * Value is a required field that will be inserted into the item and
	// shown on reports if this radio option is selected. No two options in
	// the same drop down can have the same value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// * Score is an optional field that will be inserted into the item and
	// can be shown on reports if this drop down option is selected.
	Score float32     `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	Color string      `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Image RatingImage `protobuf:"varint,5,opt,name=image,enum=happyco.inspect.type.v1.RatingImage" json:"image,omitempty"`
}

func (m *RatingDropDownOption) Reset()                    { *m = RatingDropDownOption{} }
func (m *RatingDropDownOption) String() string            { return proto.CompactTextString(m) }
func (*RatingDropDownOption) ProtoMessage()               {}
func (*RatingDropDownOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RatingDropDownOption) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RatingDropDownOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RatingDropDownOption) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RatingDropDownOption) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RatingDropDownOption) GetImage() RatingImage {
	if m != nil {
		return m.Image
	}
	return RatingImage_UNDEFINED
}

type RatingValues struct {
	// Types that are valid to be assigned to RatingValues:
	//	*RatingValues_Scalar
	//	*RatingValues_Array
	RatingValues isRatingValues_RatingValues `protobuf_oneof:"rating_values"`
}

func (m *RatingValues) Reset()                    { *m = RatingValues{} }
func (m *RatingValues) String() string            { return proto.CompactTextString(m) }
func (*RatingValues) ProtoMessage()               {}
func (*RatingValues) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isRatingValues_RatingValues interface {
	isRatingValues_RatingValues()
}

type RatingValues_Scalar struct {
	Scalar string `protobuf:"bytes,1,opt,name=scalar,oneof"`
}
type RatingValues_Array struct {
	Array *happyco_type_v1.StringArray `protobuf:"bytes,2,opt,name=array,oneof"`
}

func (*RatingValues_Scalar) isRatingValues_RatingValues() {}
func (*RatingValues_Array) isRatingValues_RatingValues()  {}

func (m *RatingValues) GetRatingValues() isRatingValues_RatingValues {
	if m != nil {
		return m.RatingValues
	}
	return nil
}

func (m *RatingValues) GetScalar() string {
	if x, ok := m.GetRatingValues().(*RatingValues_Scalar); ok {
		return x.Scalar
	}
	return ""
}

func (m *RatingValues) GetArray() *happyco_type_v1.StringArray {
	if x, ok := m.GetRatingValues().(*RatingValues_Array); ok {
		return x.Array
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RatingValues) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RatingValues_OneofMarshaler, _RatingValues_OneofUnmarshaler, _RatingValues_OneofSizer, []interface{}{
		(*RatingValues_Scalar)(nil),
		(*RatingValues_Array)(nil),
	}
}

func _RatingValues_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RatingValues)
	// rating_values
	switch x := m.RatingValues.(type) {
	case *RatingValues_Scalar:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Scalar)
	case *RatingValues_Array:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Array); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RatingValues.RatingValues has unexpected type %T", x)
	}
	return nil
}

func _RatingValues_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RatingValues)
	switch tag {
	case 1: // rating_values.scalar
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RatingValues = &RatingValues_Scalar{x}
		return true, err
	case 2: // rating_values.array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(happyco_type_v1.StringArray)
		err := b.DecodeMessage(msg)
		m.RatingValues = &RatingValues_Array{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RatingValues_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RatingValues)
	// rating_values
	switch x := m.RatingValues.(type) {
	case *RatingValues_Scalar:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Scalar)))
		n += len(x.Scalar)
	case *RatingValues_Array:
		s := proto.Size(x.Array)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HeaderField)(nil), "happyco.inspect.type.v1.HeaderField")
	proto.RegisterType((*Section)(nil), "happyco.inspect.type.v1.Section")
	proto.RegisterType((*Item)(nil), "happyco.inspect.type.v1.Item")
	proto.RegisterType((*Photo)(nil), "happyco.inspect.type.v1.Photo")
	proto.RegisterType((*FooterField)(nil), "happyco.inspect.type.v1.FooterField")
	proto.RegisterType((*RatingGroups)(nil), "happyco.inspect.type.v1.RatingGroups")
	proto.RegisterType((*RatingControl)(nil), "happyco.inspect.type.v1.RatingControl")
	proto.RegisterType((*RatingCheckbox)(nil), "happyco.inspect.type.v1.RatingCheckbox")
	proto.RegisterType((*RatingRadioGroup)(nil), "happyco.inspect.type.v1.RatingRadioGroup")
	proto.RegisterType((*RatingRadioGroupOption)(nil), "happyco.inspect.type.v1.RatingRadioGroupOption")
	proto.RegisterType((*RatingDropDown)(nil), "happyco.inspect.type.v1.RatingDropDown")
	proto.RegisterType((*RatingDropDownOption)(nil), "happyco.inspect.type.v1.RatingDropDownOption")
	proto.RegisterType((*RatingValues)(nil), "happyco.inspect.type.v1.RatingValues")
	proto.RegisterEnum("happyco.inspect.type.v1.RatingImage", RatingImage_name, RatingImage_value)
}

func init() { proto.RegisterFile("happyco/inspect/type/v1/inspect_type.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0x5b, 0x7b, 0xda, 0xcc,
	0x11, 0x36, 0xd8, 0xf8, 0xb0, 0xd8, 0xce, 0x54, 0x75, 0x13, 0xe2, 0x1c, 0x9a, 0xd2, 0x1c, 0x9c,
	0xb4, 0xc1, 0xb1, 0x9d, 0x73, 0x7a, 0xc8, 0x22, 0x2d, 0x48, 0x61, 0x91, 0x94, 0x95, 0x64, 0x4c,
	0x7a, 0x50, 0x64, 0x50, 0x6c, 0x1a, 0x8c, 0xa8, 0xc0, 0x4e, 0xfd, 0x0f, 0x7a, 0xd5, 0xcb, 0xfe,
	0x82, 0x5e, 0xf5, 0x87, 0xf5, 0x77, 0xf4, 0x99, 0x95, 0x30, 0xc4, 0x35, 0x89, 0x2f, 0xfa, 0x3c,
	0xdf, 0x77, 0xf5, 0xee, 0xbb, 0x3b, 0xf3, 0xce, 0xec, 0xcc, 0x68, 0x79, 0x20, 0x8f, 0x0e, 0x83,
	0x7e, 0xff, 0xb4, 0x15, 0x6d, 0x76, 0x7a, 0x83, 0x7e, 0xd8, 0x1a, 0x6e, 0x0e, 0x4f, 0xfb, 0xe1,
	0xe6, 0xc9, 0xd6, 0x88, 0xfb, 0xc8, 0x4b, 0xfd, 0x38, 0x1a, 0x46, 0xca, 0xb5, 0xd4, 0xb6, 0x94,
	0x9e, 0x95, 0xe4, 0xd9, 0xc9, 0xd6, 0xfa, 0x8d, 0x91, 0xc8, 0xc8, 0xf9, 0x24, 0x88, 0x3b, 0x41,
	0xe2, 0xb5, 0x7e, 0xf7, 0xfc, 0x61, 0xa7, 0x37, 0x0c, 0x0f, 0xe2, 0x60, 0xd8, 0x89, 0x7a, 0x7e,
	0xa7, 0x9d, 0x58, 0x15, 0xeb, 0x24, 0xaf, 0x87, 0x41, 0x3b, 0x8c, 0x2b, 0x9d, 0xb0, 0xdb, 0x56,
	0xd6, 0x48, 0xae, 0x1b, 0xec, 0x87, 0xdd, 0x42, 0xe6, 0x4e, 0x66, 0x63, 0x49, 0x24, 0x44, 0x51,
	0xc8, 0x1c, 0x8a, 0x14, 0xb2, 0x72, 0x53, 0xae, 0xd1, 0xf2, 0x24, 0xe8, 0x1e, 0x87, 0x85, 0xd9,
	0xc4, 0x52, 0x92, 0xa2, 0x20, 0x0b, 0x4e, 0xd8, 0xc2, 0x10, 0xe8, 0xd4, 0x0b, 0x8e, 0xc2, 0x54,
	0x49, 0xae, 0x95, 0x1d, 0x92, 0xeb, 0x0c, 0xc3, 0xa3, 0x41, 0x21, 0x7b, 0x67, 0x76, 0x23, 0xbf,
	0x7d, 0xab, 0x34, 0xe5, 0x66, 0x25, 0x63, 0x18, 0x1e, 0x89, 0xc4, 0xb6, 0xf8, 0x9f, 0x59, 0x32,
	0x87, 0xfc, 0x42, 0xc5, 0x35, 0x92, 0xeb, 0x45, 0xc3, 0x70, 0x90, 0xe6, 0x96, 0x10, 0xb4, 0xec,
	0xf4, 0x3e, 0x45, 0x69, 0x6e, 0x72, 0xad, 0x3c, 0x27, 0xf3, 0xfd, 0xc3, 0x68, 0x18, 0x0d, 0x0a,
	0x8b, 0x32, 0xf8, 0xed, 0xa9, 0xc1, 0x6d, 0x34, 0x13, 0xa9, 0xb5, 0xb2, 0x41, 0x00, 0x8b, 0xd6,
	0x3b, 0xf0, 0x0f, 0xe2, 0xe8, 0xb8, 0xef, 0x7f, 0x0e, 0x4f, 0x0b, 0x39, 0xa9, 0xbb, 0x9a, 0xec,
	0x57, 0x71, 0xbb, 0x16, 0x9e, 0x2a, 0x94, 0xcc, 0xcb, 0x2a, 0x0c, 0x0a, 0xf3, 0x32, 0xc2, 0xc3,
	0x6f, 0x5e, 0xaf, 0xb4, 0x2b, 0x6d, 0x59, 0x6f, 0x18, 0x9f, 0x8a, 0xd4, 0x11, 0x25, 0x06, 0xad,
	0x28, 0x0e, 0x07, 0x85, 0x85, 0xcb, 0x48, 0x38, 0xd2, 0x36, 0x95, 0x48, 0x1c, 0xd7, 0x3f, 0x92,
	0xfc, 0x84, 0xb2, 0x02, 0x64, 0x16, 0x33, 0x4e, 0x6a, 0x86, 0x4b, 0xe5, 0xcd, 0xa8, 0x73, 0x58,
	0xb2, 0xfc, 0xf6, 0xbd, 0xa9, 0x21, 0x84, 0xbc, 0x5e, 0x22, 0x96, 0x36, 0xf8, 0x75, 0xf6, 0x65,
	0x66, 0x7d, 0x97, 0xe4, 0x27, 0x02, 0x5f, 0x10, 0x61, 0xeb, 0xeb, 0x08, 0x37, 0xce, 0x22, 0x8c,
	0x94, 0x2b, 0xdd, 0x28, 0x18, 0xd2, 0x38, 0x0e, 0x4e, 0x27, 0x74, 0x8b, 0x06, 0xc9, 0xc9, 0xd2,
	0x2b, 0x25, 0x92, 0xed, 0xb4, 0xa5, 0xe0, 0x64, 0x9b, 0xce, 0x6e, 0x3e, 0x9e, 0x63, 0x43, 0x13,
	0xd9, 0x4e, 0x1b, 0x33, 0x38, 0x8e, 0xbb, 0xe9, 0x08, 0xe0, 0x12, 0xc7, 0xba, 0x12, 0x45, 0xc3,
	0xff, 0xd7, 0x58, 0x7f, 0x22, 0xcb, 0x62, 0xdc, 0xeb, 0xc1, 0x14, 0xbd, 0xb7, 0x64, 0x21, 0x99,
	0x88, 0xd1, 0x7c, 0xdf, 0xff, 0x4e, 0x69, 0xd5, 0xa8, 0x37, 0x8c, 0xa3, 0xae, 0x18, 0xb9, 0x15,
	0xff, 0x91, 0x25, 0x2b, 0x5f, 0x1d, 0x5d, 0x50, 0x5c, 0x46, 0x16, 0x5b, 0x87, 0x61, 0xeb, 0xf3,
	0x7e, 0xf4, 0xb7, 0xb4, 0xbe, 0x0f, 0xbe, 0x17, 0x26, 0x35, 0xd7, 0x67, 0xc4, 0x99, 0xab, 0xc2,
	0x49, 0x3e, 0x0e, 0xda, 0x9d, 0x28, 0x99, 0x6a, 0x79, 0xdd, 0x6f, 0x8d, 0x5b, 0xa2, 0x24, 0xd0,
	0x43, 0xd6, 0x40, 0x9f, 0x11, 0x24, 0x3e, 0x63, 0x4a, 0x85, 0x2c, 0xb5, 0xe3, 0xa8, 0xef, 0xb7,
	0xa3, 0x2f, 0xbd, 0xc2, 0xdc, 0xa5, 0xb2, 0xd2, 0xe2, 0xa8, 0xaf, 0x45, 0x5f, 0x7a, 0x98, 0x55,
	0x3b, 0x5d, 0x97, 0x57, 0xc9, 0x72, 0x2b, 0xb9, 0xb9, 0x7c, 0x00, 0x8b, 0xff, 0xca, 0x90, 0xd5,
	0xaf, 0x2f, 0x31, 0xa5, 0xf6, 0x6b, 0x93, 0x23, 0x37, 0xea, 0x1b, 0xee, 0xca, 0xaf, 0x42, 0x5e,
	0x2f, 0x2b, 0x12, 0x82, 0xbb, 0xad, 0xa8, 0x1b, 0xc5, 0x32, 0xd1, 0x25, 0x91, 0x10, 0xe5, 0x35,
	0xc9, 0x75, 0x8e, 0x82, 0x83, 0x50, 0x7e, 0xdc, 0xab, 0xdb, 0x77, 0xbf, 0x93, 0xbe, 0x81, 0xb6,
	0x22, 0x71, 0x29, 0x0e, 0x08, 0x9c, 0x2f, 0xd0, 0x94, 0x3c, 0x0d, 0xb2, 0x10, 0xf5, 0x71, 0x74,
	0x47, 0x33, 0xb2, 0x79, 0xe9, 0x92, 0x5b, 0xd2, 0x4f, 0x8c, 0xfc, 0x8b, 0xff, 0xcc, 0x90, 0xab,
	0x17, 0xdb, 0xfc, 0xc0, 0xd5, 0x88, 0x46, 0x3d, 0x1b, 0xb5, 0x78, 0x4a, 0x2d, 0xaa, 0xe7, 0x6b,
	0xf1, 0xf8, 0x92, 0x23, 0x73, 0xbe, 0x12, 0xff, 0xce, 0x90, 0xb5, 0x8b, 0x2c, 0x7e, 0x94, 0xb3,
	0x12, 0x8d, 0xde, 0x92, 0xe4, 0x61, 0x55, 0x0a, 0xf8, 0xe4, 0x07, 0xdd, 0x20, 0x4e, 0x92, 0xd4,
	0x67, 0x44, 0xca, 0x95, 0xa7, 0x24, 0x17, 0xe0, 0x1b, 0x99, 0x7e, 0xe6, 0x37, 0xff, 0xe7, 0x25,
	0x74, 0x86, 0x71, 0xa7, 0x77, 0x20, 0xdf, 0x51, 0x7d, 0x46, 0x24, 0xc6, 0xe5, 0x2b, 0x64, 0x25,
	0xfd, 0xbd, 0x4a, 0x7e, 0x53, 0x1e, 0xfd, 0x3d, 0x4f, 0xf2, 0x13, 0x79, 0x28, 0x2b, 0x64, 0xc9,
	0x33, 0x35, 0x56, 0x31, 0x4c, 0xa6, 0xc1, 0x0c, 0x52, 0xc7, 0xa5, 0xc2, 0xaf, 0x78, 0x9c, 0x43,
	0xe6, 0x8c, 0xea, 0x94, 0x57, 0x20, 0xab, 0xac, 0x12, 0x22, 0x29, 0xab, 0xdb, 0x6e, 0x13, 0x66,
	0x91, 0xbb, 0x86, 0x5a, 0xf3, 0x85, 0xe5, 0x99, 0x1a, 0xcc, 0x29, 0x4b, 0x24, 0xa7, 0x72, 0x46,
	0x4d, 0xc8, 0x49, 0x4f, 0x55, 0x50, 0x57, 0xd5, 0x99, 0x03, 0xf3, 0x78, 0xe2, 0xd8, 0x9c, 0xba,
	0xb0, 0xa0, 0x10, 0x32, 0x5f, 0x16, 0x56, 0x8d, 0x99, 0xb0, 0xa8, 0x2c, 0x92, 0x39, 0x14, 0x80,
	0x25, 0xe9, 0x2a, 0x2c, 0xc7, 0x01, 0xa2, 0xe4, 0x48, 0x86, 0x42, 0x1e, 0xa1, 0x0c, 0xcb, 0x08,
	0x2a, 0xac, 0x20, 0x68, 0xb0, 0x8a, 0xc0, 0xe0, 0x0a, 0x42, 0x05, 0x00, 0xa1, 0x0a, 0x3f, 0x41,
	0xd0, 0x41, 0x41, 0x30, 0xe0, 0xa7, 0x08, 0xef, 0x60, 0x0d, 0xa1, 0x06, 0x3f, 0x43, 0xe0, 0x70,
	0x15, 0xa1, 0x0e, 0xd7, 0x10, 0x4c, 0x28, 0x20, 0x58, 0x70, 0x1d, 0xc1, 0x86, 0x75, 0x84, 0xf7,
	0x70, 0x03, 0x41, 0xc0, 0x4d, 0x04, 0x07, 0x6e, 0x21, 0xb8, 0x70, 0x1b, 0xc1, 0x83, 0x9f, 0x23,
	0xec, 0xc2, 0x1d, 0x84, 0x06, 0xfc, 0x02, 0x61, 0x0f, 0x8a, 0x08, 0x4d, 0xf8, 0x25, 0xc2, 0x07,
	0xb8, 0xab, 0xe4, 0xc9, 0x82, 0x66, 0x54, 0x0d, 0xd7, 0x7f, 0x02, 0xf7, 0xc6, 0x64, 0x0b, 0xee,
	0x8f, 0xc9, 0x36, 0x3c, 0x18, 0x93, 0x1d, 0xd8, 0x18, 0x93, 0xa7, 0xf0, 0x70, 0x4c, 0x9e, 0xc1,
	0xa3, 0x31, 0x79, 0x0e, 0xbf, 0x1a, 0x93, 0x17, 0xf0, 0xeb, 0x31, 0x79, 0x09, 0x8f, 0xc7, 0xe4,
	0x15, 0x94, 0x94, 0x2b, 0x24, 0xcf, 0xf6, 0x54, 0x4e, 0xeb, 0xd4, 0x35, 0x2c, 0x13, 0x36, 0x95,
	0x65, 0xb2, 0xf8, 0xde, 0x63, 0x8e, 0x64, 0x4f, 0x94, 0x02, 0x59, 0x9b, 0x38, 0xf6, 0xcf, 0x4e,
	0xb6, 0x94, 0xab, 0x44, 0xd1, 0x2c, 0xaf, 0xcc, 0x99, 0x3f, 0xe9, 0xbf, 0x8d, 0x9d, 0xd2, 0x2c,
	0xce, 0xa9, 0x80, 0x1d, 0xec, 0x8f, 0x2d, 0xbb, 0xfc, 0x54, 0xb6, 0x8a, 0x99, 0xae, 0x03, 0xcf,
	0xb0, 0xcb, 0xae, 0xee, 0xd5, 0xcb, 0x8e, 0xef, 0xd9, 0xf0, 0x1c, 0x33, 0x48, 0xa9, 0x66, 0x35,
	0x4c, 0x78, 0x81, 0xa6, 0xb4, 0x41, 0x85, 0x06, 0x2f, 0x51, 0xac, 0xc2, 0xea, 0x94, 0x33, 0x78,
	0x85, 0x6d, 0x97, 0xab, 0xd7, 0x98, 0xa2, 0x4a, 0x39, 0x33, 0x35, 0x2a, 0xe0, 0x0d, 0xca, 0x95,
	0x3d, 0x83, 0x6b, 0x86, 0x59, 0x75, 0xe0, 0x37, 0x78, 0x38, 0xa2, 0xf0, 0x5b, 0xd4, 0xd2, 0x2d,
	0xcf, 0x61, 0xf0, 0x3b, 0x3c, 0x30, 0x2d, 0x9f, 0x99, 0xae, 0x68, 0xc2, 0xef, 0x95, 0x05, 0x32,
	0xab, 0x59, 0x55, 0x78, 0x8b, 0x0b, 0x95, 0xba, 0x40, 0x71, 0x21, 0xa8, 0x0b, 0x65, 0x14, 0x54,
	0x8d, 0x2a, 0x15, 0xcc, 0x75, 0x19, 0xa8, 0x38, 0xaf, 0xa6, 0xe5, 0x3b, 0x75, 0xab, 0x86, 0x92,
	0x1a, 0xe6, 0x61, 0x5b, 0x96, 0x0d, 0x0c, 0x57, 0x0d, 0xc6, 0x34, 0xa8, 0xa0, 0x6f, 0xd5, 0x33,
	0xa1, 0xaa, 0x00, 0x59, 0x4e, 0xe6, 0xd4, 0xaf, 0x72, 0xea, 0x38, 0xa0, 0x63, 0xb5, 0x55, 0x41,
	0xd5, 0x1a, 0xd3, 0xc0, 0x40, 0x69, 0x8d, 0x51, 0xcd, 0xaf, 0x50, 0x95, 0xc1, 0x3b, 0x4c, 0x49,
	0xa7, 0xa6, 0x66, 0xa8, 0xd4, 0x86, 0xda, 0x84, 0xaf, 0xce, 0xa8, 0x70, 0x81, 0xcb, 0xec, 0xe5,
	0xb2, 0x8e, 0x32, 0x4e, 0x53, 0x18, 0x66, 0x95, 0x81, 0x99, 0x7c, 0x32, 0x96, 0x5a, 0x03, 0x0b,
	0xb3, 0xab, 0x7b, 0x8e, 0xa1, 0xfa, 0xa6, 0xe5, 0x32, 0xb0, 0x65, 0xc9, 0x39, 0x35, 0x5d, 0x78,
	0x8f, 0xe9, 0x99, 0x96, 0xc3, 0x40, 0xc8, 0x8e, 0x0b, 0xcb, 0xe6, 0xcc, 0x05, 0x07, 0x83, 0x32,
	0xce, 0x54, 0x57, 0x18, 0x2a, 0xb8, 0x98, 0x79, 0xd9, 0xab, 0x82, 0x87, 0x6d, 0xa0, 0x42, 0x58,
	0x0d, 0x5f, 0x18, 0x55, 0xdd, 0x85, 0x5d, 0x54, 0x4e, 0x36, 0x38, 0xab, 0xb8, 0xd0, 0x40, 0xbf,
	0x84, 0x7b, 0x36, 0xec, 0x8d, 0x4f, 0x65, 0xd3, 0x9a, 0x18, 0x42, 0x30, 0xb5, 0xa9, 0x72, 0x06,
	0x1f, 0x30, 0x09, 0x57, 0x50, 0x47, 0x87, 0x3f, 0xa0, 0x7e, 0x8d, 0x35, 0xe1, 0x8f, 0x98, 0x8d,
	0x4c, 0xf9, 0x4f, 0xd8, 0x54, 0xcf, 0x94, 0xeb, 0x3f, 0xa7, 0x37, 0xf1, 0x34, 0xf0, 0x51, 0xdf,
	0xf1, 0x4c, 0x47, 0x37, 0x4c, 0x06, 0x1f, 0x65, 0x95, 0xb9, 0xe7, 0x40, 0x80, 0x26, 0x75, 0xc3,
	0xf4, 0x1c, 0xd8, 0x97, 0x93, 0xc3, 0xf6, 0xdc, 0x8a, 0xc1, 0xb8, 0x06, 0x2d, 0x79, 0xc2, 0x5c,
	0x26, 0xa0, 0x9d, 0x74, 0x51, 0x40, 0x28, 0x05, 0x75, 0x2c, 0xd9, 0x27, 0x8c, 0xd3, 0x10, 0xcc,
	0x54, 0x75, 0x38, 0xc0, 0x74, 0x55, 0xca, 0x55, 0x8f, 0x53, 0xd7, 0x12, 0x70, 0x88, 0xb7, 0x55,
	0x05, 0xd3, 0x0c, 0xd7, 0x57, 0x71, 0xd2, 0x3a, 0x68, 0x60, 0x53, 0xc3, 0x74, 0xcb, 0xc2, 0x73,
	0x74, 0xf8, 0x0b, 0x3a, 0x0b, 0x8b, 0x73, 0x26, 0xe0, 0x33, 0xae, 0xeb, 0x56, 0xd9, 0xe0, 0x0c,
	0xba, 0x98, 0x57, 0x85, 0xd3, 0x2a, 0x1c, 0xc9, 0x5e, 0x5a, 0x96, 0xf0, 0x2d, 0x9b, 0x99, 0xd0,
	0x3b, 0xa3, 0x8e, 0xee, 0xb9, 0x10, 0xc9, 0xba, 0x32, 0x0d, 0xfa, 0xe8, 0xec, 0xe8, 0x56, 0x83,
	0x09, 0xf8, 0x2b, 0x46, 0xc5, 0x39, 0x62, 0x3e, 0xe5, 0x54, 0xd4, 0x21, 0xc6, 0xa8, 0x1c, 0xcb,
	0xed, 0x97, 0x3d, 0x5e, 0x86, 0x01, 0x8e, 0x80, 0x53, 0x37, 0x38, 0x6b, 0xfa, 0x3a, 0xb5, 0xed,
	0x26, 0x0c, 0xe5, 0xeb, 0x99, 0xec, 0x38, 0x54, 0x83, 0xe3, 0xf2, 0xf5, 0x0f, 0xd7, 0xa6, 0xfc,
	0xef, 0xdb, 0x9f, 0x97, 0xff, 0xc7, 0x76, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x15, 0xcf, 0x8f,
	0xbe, 0x19, 0x0e, 0x00, 0x00,
}
