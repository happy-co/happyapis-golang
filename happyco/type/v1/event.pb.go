// Code generated by protoc-gen-go.
// source: happyco/type/v1/event.proto
// DO NOT EDIT!

package v1

import proto "github.com/happy-co/happyapis-golang/github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventHandlerOptions struct {
	AckTimeoutSeconds int32 `protobuf:"varint,1,opt,name=ack_timeout_seconds,json=ackTimeoutSeconds" json:"ack_timeout_seconds,omitempty"`
}

func (m *EventHandlerOptions) Reset()                    { *m = EventHandlerOptions{} }
func (m *EventHandlerOptions) String() string            { return proto.CompactTextString(m) }
func (*EventHandlerOptions) ProtoMessage()               {}
func (*EventHandlerOptions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *EventHandlerOptions) GetAckTimeoutSeconds() int32 {
	if m != nil {
		return m.AckTimeoutSeconds
	}
	return 0
}

type Event struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Event) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EventAck struct {
	EventIds []int32 `protobuf:"varint,1,rep,packed,name=event_ids,json=eventIds" json:"event_ids,omitempty"`
	// Types that are valid to be assigned to AckMessage:
	//	*EventAck_Ack
	//	*EventAck_ExtendTimeoutSeconds
	AckMessage isEventAck_AckMessage `protobuf_oneof:"ack_message"`
}

func (m *EventAck) Reset()                    { *m = EventAck{} }
func (m *EventAck) String() string            { return proto.CompactTextString(m) }
func (*EventAck) ProtoMessage()               {}
func (*EventAck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type isEventAck_AckMessage interface {
	isEventAck_AckMessage()
}

type EventAck_Ack struct {
	Ack bool `protobuf:"varint,2,opt,name=ack,oneof"`
}
type EventAck_ExtendTimeoutSeconds struct {
	ExtendTimeoutSeconds int32 `protobuf:"varint,3,opt,name=extend_timeout_seconds,json=extendTimeoutSeconds,oneof"`
}

func (*EventAck_Ack) isEventAck_AckMessage()                  {}
func (*EventAck_ExtendTimeoutSeconds) isEventAck_AckMessage() {}

func (m *EventAck) GetAckMessage() isEventAck_AckMessage {
	if m != nil {
		return m.AckMessage
	}
	return nil
}

func (m *EventAck) GetEventIds() []int32 {
	if m != nil {
		return m.EventIds
	}
	return nil
}

func (m *EventAck) GetAck() bool {
	if x, ok := m.GetAckMessage().(*EventAck_Ack); ok {
		return x.Ack
	}
	return false
}

func (m *EventAck) GetExtendTimeoutSeconds() int32 {
	if x, ok := m.GetAckMessage().(*EventAck_ExtendTimeoutSeconds); ok {
		return x.ExtendTimeoutSeconds
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventAck) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventAck_OneofMarshaler, _EventAck_OneofUnmarshaler, _EventAck_OneofSizer, []interface{}{
		(*EventAck_Ack)(nil),
		(*EventAck_ExtendTimeoutSeconds)(nil),
	}
}

func _EventAck_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventAck)
	// ack_message
	switch x := m.AckMessage.(type) {
	case *EventAck_Ack:
		t := uint64(0)
		if x.Ack {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *EventAck_ExtendTimeoutSeconds:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ExtendTimeoutSeconds))
	case nil:
	default:
		return fmt.Errorf("EventAck.AckMessage has unexpected type %T", x)
	}
	return nil
}

func _EventAck_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventAck)
	switch tag {
	case 2: // ack_message.ack
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.AckMessage = &EventAck_Ack{x != 0}
		return true, err
	case 3: // ack_message.extend_timeout_seconds
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.AckMessage = &EventAck_ExtendTimeoutSeconds{int32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _EventAck_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventAck)
	// ack_message
	switch x := m.AckMessage.(type) {
	case *EventAck_Ack:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *EventAck_ExtendTimeoutSeconds:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ExtendTimeoutSeconds))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EventHandlerOptions)(nil), "happyco.type.v1.EventHandlerOptions")
	proto.RegisterType((*Event)(nil), "happyco.type.v1.Event")
	proto.RegisterType((*EventAck)(nil), "happyco.type.v1.EventAck")
}

func init() { proto.RegisterFile("happyco/type/v1/event.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0x96, 0x4a, 0x7d, 0xa2, 0x63, 0x99, 0xe8, 0x60, 0x97, 0xd1, 0x53, 0x4f, 0x29,
	0x43, 0xf0, 0xee, 0x60, 0x50, 0x4f, 0x42, 0xf4, 0xe4, 0xa5, 0xc4, 0xe4, 0xa1, 0x21, 0x2e, 0x09,
	0x4b, 0x2c, 0xee, 0xea, 0x5f, 0x2e, 0x49, 0x77, 0xd1, 0x1d, 0xdf, 0xfb, 0x3d, 0xbe, 0xf7, 0xe3,
	0x83, 0xe5, 0x07, 0x77, 0xee, 0x20, 0x6c, 0x1b, 0x0e, 0x0e, 0xdb, 0x61, 0xdd, 0xe2, 0x80, 0x26,
	0x50, 0xb7, 0xb7, 0xc1, 0x92, 0xe9, 0x11, 0xd2, 0x08, 0xe9, 0xb0, 0xae, 0xb7, 0x30, 0xdf, 0x46,
	0xde, 0x71, 0x23, 0x3f, 0x71, 0xff, 0xe4, 0x82, 0xb2, 0xc6, 0x13, 0x0a, 0x73, 0x2e, 0x74, 0x1f,
	0xd4, 0x0e, 0xed, 0x57, 0xe8, 0x3d, 0x0a, 0x6b, 0xa4, 0x5f, 0x64, 0xab, 0xac, 0x29, 0xd9, 0x8c,
	0x0b, 0xfd, 0x32, 0x92, 0xe7, 0x11, 0xd4, 0xb7, 0x50, 0xa6, 0x18, 0x72, 0x05, 0xb9, 0x92, 0xc7,
	0xbb, 0x5c, 0xc9, 0xfa, 0x27, 0x83, 0x2a, 0x91, 0x07, 0xa1, 0xc9, 0x12, 0xce, 0x93, 0x4c, 0xaf,
	0x52, 0x56, 0xd1, 0x94, 0xac, 0x4a, 0x8b, 0x47, 0xe9, 0x09, 0x81, 0x82, 0x0b, 0xbd, 0xc8, 0x57,
	0x59, 0x53, 0x75, 0x13, 0x16, 0x07, 0x72, 0x0f, 0x37, 0xf8, 0x1d, 0xd0, 0xc8, 0x13, 0x93, 0x22,
	0x7e, 0xe8, 0x26, 0xec, 0x7a, 0xe4, 0x7f, 0x75, 0x36, 0x97, 0x70, 0x11, 0xf5, 0x77, 0xe8, 0x3d,
	0x7f, 0xc7, 0xcd, 0xec, 0x75, 0xfa, 0xaf, 0x94, 0xb7, 0xb3, 0xd4, 0xc7, 0xdd, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x53, 0x7b, 0x7f, 0x9c, 0x2e, 0x01, 0x00, 0x00,
}
